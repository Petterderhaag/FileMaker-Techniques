/**
 * =====================================
 * # ( name ; value )
 *
 * PURPOSE:
 *		# ( name ; value ) creates a string designed to be sent as a script
 *		parameter to a script using the DeclareVariables function to receive
 *		named parameters. You can create a string for multiple named parameters
 *		by concatenating multiple calls to this function.
 *
 * RETURNS:
 *		A string of the form $name = "value";¶ that can be evaluated by the
 *		#Assign ( parameters ) function.
 *
 * PARAMETERS:
 *		name: The name of the name-value pair to create
 *		value: The value of the name-value pair to create
 *
 * EXAMPLE:
 *		# ( "name1"; $value1 ) & # ( "name2" ; "value2" )
 *
 * DEPENDENCIES: none
 *
 * NOTES:
 *		Do not include the $ prefix in the "name" parameter; this function adds
 *		$ for you. This function will strip all $ characters from the name
 *		passed to it.
 *
 * HISTORY:
 *		MODIFIED on 2010-11-23 by Jeremy Bante <http://scr.im/jbantetsg> to
 *		strip "$" characters from the name parameter.
 *		MODIFIED on 2010-10-04 by jeremy@kyologic.com to fit syntax inspired by
 *		a comment on standards.filemakermagazine.com by Richard Dyce, which was
 *		originally used by Jesse Antunes of six.fried.rice.
 *		CREATED on 2010-02-08 by Jeremy Bante <jeremy@kyologic.com>.
 *		Inspired by an example in the FileMaker help documentation.
 *
 * REFERENCES:
 *		Script Parameter Interface Best Practice: http://filemakerstandards.org/pages/viewpage.action?pageId=557462
 * =====================================
 */
"$" & Substitute ( name ; "$" ; "" ) & " = " & Quote ( value ) & ";¶"