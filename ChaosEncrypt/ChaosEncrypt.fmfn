/**
 * =====================================
 * ChaosEncrypt ( text ; key )
 *
 * WARNING:
 * Different versions of the ChaosEncrypt and ChaosDecrypt functions are
 * unlikely to be compatible.
 *
 * PURPOSE:
 * Uses chaotic permutations of key to create an encrypted version of text that
 * is extremely difficult to retrieve without the original key. This function
 * uses a pseudo-chaotic stream cipher algorithm adapted to the constraints of
 * FileMaker custom functions.
 *
 * PARAMETERS:
 * text: The text string to encrypt
 * key: The key to use to encrypt text
 *
 * RETURNS:
 * An encrypted version of text.
 *
 * NOTES:
 * This function has not been subjected to rigorous cryptanalysis, and the
 * author does not warranty the security of encrypted text.
 *
 * This is a recursive custom function, and hence is limited in the maximum
 * combined length of text and key that it can decrypt.
 *
 * HISTORY:
 * MODIFIED on 2011-01-23 by Jeremy Bante to account for composite
 * characters.
 * MODIFIED on 2011-01-14 by Jeremy Bante to use a different map and
 * systematically perturbed orbits.
 * MODIFIED on 2011-01-09 by Jeremy Bante to use a different chaotic
 * map that results in greater diffusion and faster calculation.
 * MODIFIED on 2011-01-05 by Jeremy Bante to use a different chaotic
 * map when transforming the key.
 * CREATED on 2011-01-04 by Jeremy Bante of The Support Group
 * <http://scr.im/jbantetsg>.
 *
 * REFERENCES:
 * ChaosDecrypt function: http://www.briandunning.com/cf/1259
 * ChaosEncrypt function: http://www.briandunning.com/cf/1258
 * ChaosHash function: http://www.briandunning.com/cf/1261
 * =====================================
 */

Case (
	/*First call to function; initialize variables*/
	not $~step;
	Let ( [
		$~keyLength = Length ( key );
		$~priorByte = 32749; //greatest prime < 2^15
		$~step = 1
	];
		ChaosEncrypt ( text ; key )
	);

	/*Step 1, convert key to numbers and scramble first round*/
	$~step = 1;
	Let ( [
		//extract next byte from key, accounting for composite characters
		~keyByte = Code ( Left ( key ; 1 ) );
		~extraByte = Left ( ~keyByte ; Length ( ~keyByte ) - 5 );
		~keyByte = Mod ( Right ( ~keyByte ; 5 ) + $~priorByte ; 65535 );
		
		//iterate ~keyByte through the map 8x, perturb 4th orbits
		~keyByte = Mod ( 4099 * ( 65535 - ~keyByte ) ; 65535 );
		~keyByte = Mod ( 4099 * ( 65535 - ~keyByte ) ; 65535 );
		~keyByte = Mod ( 4099 * ( 65535 - ~keyByte ) ; 65535 );
		~keyByte = Mod ( 4099 * ( 65535 - ~keyByte ) + 1; 65535 );
		
		~keyByte = Mod ( 4099 * ( 65535 - ~keyByte ) ; 65535 );
		~keyByte = Mod ( 4099 * ( 65535 - ~keyByte ) ; 65535 );
		~keyByte = Mod ( 4099 * ( 65535 - ~keyByte ) ; 65535 );
		~keyByte = Mod ( 4099 * ( 65535 - ~keyByte ) + 1 ; 65535 ) + 1;
		
		//add new value to list
		$~key = List ( ~keyByte ; $~key );
		$~priorByte = ~keyByte;
		
		//continue until whole key is processed
		~keyLength = Length ( key );
		$~step = If ( ~keyLength > 1 ; $~step ; /*else*/ $~step + 1 )
	];
		ChaosEncrypt (
			text;
			Char ( ~extraByte ) & Right ( key ; ~keyLength - 1 )
		)
	);
	
	/*Step 2, apply key to text*/
	$~step = 2;
	Let ( [
		~keyByte = Mod ( GetValue ( $~key ; 1 ) + $~priorByte ; 65535 );
		
		//iterate ~keyByte through the map 8x, perturb 4th orbits
		~keyByte = Mod ( 4099 * ( 65535 - ~keyByte ) ; 65535 );
		~keyByte = Mod ( 4099 * ( 65535 - ~keyByte ) ; 65535 );
		~keyByte = Mod ( 4099 * ( 65535 - ~keyByte ) ; 65535 );
		~keyByte = Mod ( 4099 * ( 65535 - ~keyByte ) + 1; 65535 );
		
		~keyByte = Mod ( 4099 * ( 65535 - ~keyByte ) ; 65535 );
		~keyByte = Mod ( 4099 * ( 65535 - ~keyByte ) ; 65535 );
		~keyByte = Mod ( 4099 * ( 65535 - ~keyByte ) ; 65535 );
		~keyByte = Mod ( 4099 * ( 65535 - ~keyByte ) + 1 ; 65535 ) + 1;
		
		//extract next byte from text, accounting for composite characters
		~textByte = Code ( Left ( text ; 1 ) );
		~extraByte = Left ( ~textByte ; Length ( ~textByte ) - 5 );
		~textByte = Right ( ~textByte ; 5 );

		//apply key to text
		//additive complement under 2^16 - 1 is analogous to XOR in binary encryption
		~textByte = 65535 - Mod ( ~textByte + ~keyByte ; 65535 );
		$~cipherText = $~cipherText & Char ( ~textByte );
		
		//rotate the key
		$~priorByte = ~textByte;
		$~key =
			Substitute (
				List ( RightValues ( $~key ; $~keyLength - 1 ) ; ~keyByte );
				"¶¶";
				"¶"
			);

		//continue until whole text is encrypted
		~textLength = Length ( text );
		$~step = If ( ~textLength > 1 ; $~step ; /*else*/ $~step + 1 )
	];
		ChaosEncrypt (
			Char ( ~extraByte ) & Right ( text ; ~textLength - 1 );
			""
		)
	);
	
	/*Step 3, clean-up and return result*/
	$~step = 3;
	Let ( [
		~cipherText = $~cipherText;
		
		//purge variables
		$~cipherText = "";
		$~key = "";
		$~keyLength = "";
		$~priorByte = "";
		$~step = ""
	];
		~cipherText
	)
)