/**
 * =====================================
 * AuditLog ( modificationTrigger ; primaryKey ; logData ; logFieldNames )
 *
 * PURPOSE:
 *		Creates a log of any data changes made to a record.
 *
 * RETURNS:
 *		A tab- and return-delimited list of all changes made to the current
 *		record to any of the fields specified by fieldNames.
 *
 * PARAMETERS:
 *		modificationTrigger: Any value that will trigger on any record
 *			modification.
 *		primaryKey: The primary key for the record.
 *		logData: The existing log data for the record.
 *		logFieldNames: A return-delimited list of the names of fields to audit
 *			for changes.
 *
 * DEPENDENCIES:
 *		UUIDTimeNIC (May be substituted for another timestamp-based UUID
 *			function)
 *		UUIDGetTimestamp
 *
 * VARIABLES:
 *		$~auditLog.initialize: A flag indicating that the current change is only
 *			initializing the log as a point of comparison, and does not
 *			represent an actual data edit.
 *		$~auditLog.pause: A flag indicating that the current change is part of a
 *			scripted process, and shouldn't be logged until the script is done.
 *
 * EXAMPLE: (in a field auto-enter calculation)
 *		AuditLog (
 *			modificationTimestamp;	// triggers calculation
 *			id;	// primary key
 *			Self;	// logData
 *			List ( GetFieldName ( field1 ) ; GetFieldName ( field2 ) )
 *		)
 *
 * NOTES:
 *		The tab- and return-delimited format is a compromise between machine and
 *		human readability.
 *
 * HISTORY:
 *		CREATED on 2011-06-13 by Jeremy Bante <http://scr.im/jbante>.
 *		INSPIRED by the UltraLog solution by Ray Cologon.
 *
 * REFERENCES:
 *		Ray Cologon's UltraLog: http://www.nightwing.com.au/FileMaker/demosX/demoX01.html
 * =====================================
 */

Case (
	/* Logging is paused; do nothing */
	$~auditLog.pause;
		logData;

	/* Step 0, check for and build record and session headers */
	not $~auditLog.step;
	Let ( [
		~TAB = "	";

		// data to compare with most recent session and record rows
		~uuid = UUIDTimeNIC;
		~now = UUIDGetTimestamp ( ~uuid );
		~sessionKey = Right ( ~uuid ; 21 );
		~script = Get ( ScriptName );
		~field = GetValue ( logFieldNames ; 1 );
		~field = Substitute ( ~field ; "::" ; "¶" );
		$~table =
			If ( ValueCount ( ~field ) > 1;
				GetValue ( ~field ; 1 )
			);

		// find most recent session row
		~sessionPosition = Position ( logData ; ~TAB & "session" & ~TAB ; 1 ; 1 );
		~sessionValue = ValueCount ( Left ( logData ; ~sessionPosition ) );
		~session = GetValue ( logData ; ~sessionValue );

		// find most recent record row
		~recordPosition = Position ( logData ; ~TAB & "record" & ~TAB ; 1 ; 1 );
		~recordValue = ValueCount ( Left ( logData ; ~recordPosition ) );
		~record = GetValue ( logData ; ~recordValue );

		// build session and record rows
		$~session =
			If (
				$~auditLog.initialize
				or ~sessionKey ≠ AuditGetSessionKey ( ~session )
				or ~script ≠ AuditGetSessionScript ( ~session );
					~now & ~TAB
					& If ( $~auditLog.initialize;
						"initialize";
						/* Else */ "session"
					) & ~TAB
					& TextStyleAdd ( "account:" ; Italic ) & ~TAB
					& Get ( AccountName ) & ~TAB
					& If ( not IsEmpty ( ~script ) ;
						TextStyleAdd ( "script:" ; Italic )
					) & ~TAB
					& ~script & ~TAB
					& TextStyleAdd ( "session:" ; Italic ) & ~TAB
					& ~sessionKey
			);
		$~record=
			If (
				$~auditLog.initialize
				or IsEmpty ( ~record );
					~now & ~TAB
					& "record" & ~TAB
					& TextStyleAdd ( "table:" ; Italic ) & ~TAB
					& $~table & ~TAB
					& TextStyleAdd ( "id:" ; Italic ) & ~TAB
					& primaryKey
			);

		// set-up for checking field values
		$~fieldCount = ValueCount ( logFieldNames );
		$~auditLog.step = 1
	];
		AuditLog ( "" ; "" ; logData ; logFieldNames )
	);

	/* Step 1, audit field changes */
	$~auditLog.step = 1;
	Let ( [
		~TAB = "	";
		$~auditLog.i = $~auditLog.i + 1;

		// Get ~fieldValue
		~fieldName = GetValue ( logFieldNames ; $~auditLog.i );
		~fieldValue = GetField ( ~fieldName );
		~fieldValue = // escape ~TAB delimiter character
			Substitute (
				~fieldValue;
				[ "\\" ; "\\\\" ];
				[ ~TAB ; "\\t" ]
			);
		~fieldName = Substitute ( ~fieldName ; $~table & "::" ; "" );

		// Get ~priorValue for comparison
		~priorStart =
			Position (
				logData;
				~TAB & "field:" & ~TAB & ~fieldName & ~TAB;
				1;
				1
			);
		~priorStart =
			If ( ~priorStart; // ~fieldName was found in log
				Position ( logData ; ~TAB ; ~priorStart + 1 ; 3 ) + 1
			);
		~priorEnd =
			If ( ~priorStart; // ~fieldName was found in log
				Position ( logData ; ~TAB ; ~priorStart + 1 ; 1 )
			);
		~priorValue =
			If ( ~priorStart; // ~fieldName was found in log
				Evaluate (
					Middle (
						logData;
						~priorStart;
						~priorEnd - ~priorStart
					)
				)
			);

		// Build $~editList
		~edit =
			If (
				$~auditLog.initialize
				or not Exact ( ~fieldValue ; ~priorValue );
					UUIDGetTimestamp ( UUIDTimeNIC ) & ~TAB
					& If ( $~auditLog.initialize;
						"initialize";
						/* Else */ "edit"
					) & ~TAB
					& TextStyleAdd ( "field:" ; Italic ) & ~TAB
					& ~fieldName & ~TAB
					& If ( not $~auditLog.initialize;
						TextStyleAdd ( "to:" ; Italic )
					) & ~TAB
					& Quote ( ~fieldValue ) & ~TAB
					& If ( not $~auditLog.initialize;
						TextStyleAdd ( "from:" ; Italic ) & ~TAB
						& Quote ( ~priorValue )
					)
			);
		$~editList = List ( ~edit ; $~editList );

		$~auditLog.step = If ( $~auditLog.i ≥ $~fieldCount ; $~auditLog.step + 1 ; /*Else*/ $~auditLog.step )
	];
		AuditLog ( "" ; "" ; logData ; logFieldNames )
	);

	/* Step 2, format result */
	$~auditLog.step = 2;
	Let ( [
		~editList = $~editList;
		~editsExist = not IsEmpty ( ~editList );
		~session = $~session;
		~sessionExists = not IsEmpty ( ~session );
		~record = $~record;
		~color =
			If ( $~auditLog.initialize;
				RGB ( 204 ; 204 ; 204 ); // 80% Gray
				/* Else */ 0 // Black
			);

		// purge variables
		$~editList = "";	// Null
		$~fieldCount = "";
		$~auditLog.i = "";
		$~record = "";
		$~session = "";
		$~auditLog.step = "";
		$~table = ""
	];
		List (
			TextColor ( ~editList ; ~color );
			TextStyleAdd ( TextColor ( ~session ; ~color ) ; Bold );
			TextStyleAdd ( ~record ; Bold );
			If ( ~sessionExists ; "	" );
			If ( not $~auditLog.initialize ; logData )
		)
	);

	/* Else, error with $~auditLog.step */
		Let ( [
			$~auditLog.step = ""	// Null
		];
			AuditLog ( "" ; primaryKey ; logData ; logFieldNames )
		)
)