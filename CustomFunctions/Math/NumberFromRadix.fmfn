/*******************************************************************************
 * NumberFromRadix ( numberText ; characterSet )
 * Converts numberText from the base specified by the given characterSet to a
 * FileMaker (decimal) number. Results from converting fractional portions of
 * numbers may be approximate rather than exact.
 *
 * @parameter numberText: a number represented as text in the specified base
 * @parameter characterSet: an ordered tuple of characters specifying the base
 *
 * @return a number
 *
 * @history 2012-03-12 - Jeremy Bante <http://scr.im/jbante> - Created
 ******************************************************************************/

Case (
	/* Step 0, set-up */
	not $_radix.step ;
		Let ( [
			$_radix.base = Length ( characterSet ) ;
			_numberText = Filter ( numberText ; "." & characterSet ) ;

			$_radix.isNegative = Left ( numberText ; 1 ) = "-" ;
			_length = Length ( _numberText ) ;
			_dotPosition = Position ( _numberText ; "." ; 1 ; 1 ) ;
			$_radix.power = // initialize to highest power of numberText
				If ( _dotPosition ;
					_dotPosition - 2 ;
					/* Else */ _length - 1
				) ;
			$_radix.powerMin =
				If ( _dotPosition;
					$_radix.power - _length + 2 ;
					/* Else */ 0
				) ;
			$_radix.round =	// constrain result to analogous significant digits
				Ceiling (
					Ln ( $_radix.base ^ Abs ( $_radix.powerMin ) ) / Ln ( 10 )
				) ;

			$_radix.step =
				If ( IsEmpty ( _numberText ) or $_radix.base < 2 ;
					-1 ;	// error, skip to end
					/* Else */ 1
				)
		] ;
			NumberFromRadix ( _numberText ; characterSet )
		) ;

	/* Step 1, convert digits */
	$_radix.step = 1 ;
		Let ( [
			_digit = Left ( numberText ; 1 ) ;
			_digit = Position ( characterSet ; _digit ; 1 ; 1 ) - 1 ;
			_isDot = _digit = -1 ;
			_numberText = Right ( numberText ; Length ( numberText ) - 1 ) ;

			$_radix.decimal =
				$_radix.decimal +
				If ( not _isDot ; _digit * ( $_radix.base ^ $_radix.power ) ) ;
			$_radix.power = $_radix.power - If ( not _isDot ; 1 ; 0 ) ;
			$_radix.step =
				If ( $_radix.power â‰¥ $_radix.powerMin ;
					$_radix.step ;
					/* Else */ $_radix.step + 1
				)
		] ;
			NumberFromRadix ( _numberText ; characterSet )
		) ;

	/* Step 2, clean-up and return result */
	$_radix.step = 2 or $_radix.step = -1 ;
		Let ( [
			_error = $_radix.step = -1 ;
			_result =
				If ( $_radix.isNegative ; "-" )
				& Round ( $_radix.decimal ; $_radix.round ) ;

			// Purge variables
			$_radix.base = "" ;
			$_radix.decimal = "" ;
			$_radix.isNegative = "" ;
			$_radix.power = "" ;
			$_radix.powerMin = "" ;
			$_radix.round = "" ;
			$_radix.step = ""
		] ;
			If ( _error ; "?" ; /* Else */ _result )
		)
)