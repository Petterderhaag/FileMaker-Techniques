/**
 * =====================================
 * ErrorFunctionInverse ( x )
 * https://github.com/jbante/FileMaker-Techniques/blob/master/CustomFunctions/Math/ErrorFunctionInverse.fmfn
 *
 * RETURNS:
 *		The inverse error function of x (commonly represented as erfinv in other
 *		programming environments).
 *
 * PARAMETERS:
 *		x: A number. -1 < x < 1
 *
 * DEPENDENCIES: none
 *
 * NOTES:
 *		This function calculates the inverse error function by adding successive
 *		values from its Taylor/Maclaurin series until the difference falls to
 *		zero at the current precision. The coefficients for the terms of the
 *		series are memoized in variables to improve performance in repeated
 *		calls to the function within the same local scope.
 *
 * HISTORY:
 *		CREATED on 2013-03-12 by Jeremy Bante <http://scr.im/fugue>.
 *
 * REFERENCES:
 *		http://en.wikipedia.org/wiki/Error_function#Inverse_functions
 * =====================================
 */

Case (
	/* Step 0, set-up */
	not $~erfinv.step ;
		Let ( [
			$~erfinv.coefficient[0] = 1 ;
			x = x * Sqrt ( Pi ) / 2 ;	// common factor in Taylor series
			$~erfinv.step = If ( x ≤ -1 or x ≥ 1 ; -1 ; /* Else */ 1 )
		] ;
			ErrorFunctionInverse ( x )
		) ;

	/* Step 1, accumulate Taylor series */
	$~erfinv.step = 1 ;
		Let ( [
			$~erfinv.k = $~erfinv.k + 1 ;
			$~erfinv.m = -1 ;	// reset inner loop

			// use previously calculated coefficient to add next term of series
			~u = 2 * ( $~erfinv.k - 1 ) + 1 ;
			$~erfinv.result =
				$~erfinv.result
				+ x ^ ~u * $~erfinv.coefficient[$~erfinv.k - 1] / ~u ;

			$~erfinv.step =
				Case (
					// precision limit reached
					$~erfinv.result - $~erfinv.priorResult = 0 ;
						3 ;

					// coefficient for next term is not memoized
					IsEmpty ( $~erfinv.coefficient[$~erfinv.k] ) ;
						$~erfinv.step + 1 ;

					/* Else, add next series term */
						$~erfinv.step
				) ;
			$~erfinv.priorResult = $~erfinv.result
		] ;
			ErrorFunctionInverse ( x )
		) ;

	/* Step 2, calculate series term coefficient (inner loop) */
	$~erfinv.step = 2 ;
		Let ( [
			$~erfinv.m = $~erfinv.m + 1 ;
			$~erfinv.coefficient[$~erfinv.k] =
				$~erfinv.coefficient[$~erfinv.k]
				+ $~erfinv.coefficient[$~erfinv.m]
				* $~erfinv.coefficient[$~erfinv.k - 1 - $~erfinv.m ]
				/ ( ( $~erfinv.m + 1 ) * ( 2 * $~erfinv.m + 1 ) ) ;
			$~erfinv.step =
				If ( $~erfinv.m < $~erfinv.k - 1 ;
					$~erfinv.step ;
					/* Else */ $~erfinv.step - 1
				)
		] ;
			ErrorFunctionInverse ( x )
		) ;

	/* Step 3, clean-up and return result */
	$~erfinv.step = 3 or $~erfinv.step = -1 ;
		Let ( [
			~error = $~erfinv.step = -1 ;
			~result = $~erfinv.result ;

			// purge variables
			// $~erfinv.coefficient variables not purged to improve performance
			$~erfinv.i = "" ;
			$~erfinv.k = "" ;
			$~erfinv.m = "" ;
			$~erfinv.priorResult = "" ;
			$~erfinv.result = "" ;
			$~erfinv.step = ""
		] ;
			If ( ~error ; "?" ; /* Else */ ~result )
		)
)