/**
 * =====================================
 * Bezier ( controlPoints ; t )
 *
 * PURPOSE:
 * Calculates the value at t of the Bézier curve defined by the specified
 * controlPoints.
 *
 * RETURNS:
 * A number representing the point on the Bézier curve defined by the given
 * controlPoints at value t.
 *
 * PARAMETERS:
 * controlPoints: A ¶-delimited list of numbers, where the first value is the
 * starting point, and the last value is the ending point of the curve.
 * t: A number, 0 ≤ t ≤ 1
 *
 * DEPENDENCIES: none
 *
 * HISTORY:
 * CREATED on 2011-01-26 by Jeremy Bante of The Support Group
 * <http://scr.im/jbante>.
 *
 * REFERENCES:
 * http://en.wikipedia.org/wiki/B%C3%A9zier_curve
 * =====================================
 */

Case (
	/*Step 0, initialize with linear Bézier curve*/
	not $~bezier.step;
	Let ( [
		$~bezier.n = ValueCount ( controlPoints ) - 1;
		$~bezier.i = 0;
		$~bezier.sum = ( 1 - t ) * GetValue ( controlPoints ; $~bezier.i + 1 );
		$~bezier.step =
			Case (
				t < 0 or t > 1 ; 2; //error, out of range
				$~bezier.i ≥ $~bezier.n; 3; //trivial case, skip to return result
				/*else*/ 1
			)
	];
		Bezier ( controlPoints ; t )
	);

	/*Step 1, add-up sum for arbitrary-degree Bézier curve*/
	$~bezier.step = 1;
	Let ( [
		$~bezier.i = $~bezier.i + 1;
		$~bezier.sum =
			$~bezier.sum
			+ Combination ( $~bezier.n ; $~bezier.i )
			* ( 1 - t ) ^ ( $~bezier.n - $~bezier.i )
			* t ^ ( $~bezier.i )
			* GetValue ( controlPoints ; $~bezier.i + 1 );
		$~bezier.step =
			If ( $~bezier.i ≥ $~bezier.n ; 3 ; /*else*/ $~bezier.step )
	];
		Bezier ( controlPoints ; t )
	);

	/*Step 2, handle errors*/
	$~bezier.step = 2;
	Let ( [
		$~bezier.sum = "?";
		$~bezier.step = $~bezier.step + 1
	];
		Bezier ( "" ; "" )
	);

	/*Step 3, clean-up and return result*/
	$~bezier.step = 3;
	Let ( [
		~sum = $~bezier.sum;

		//purge variables
		$~bezier.i = "";
		$~bezier.n = "";
		$~bezier.step = "";
		$~bezier.sum = ""
	];
		~sum
	)
)