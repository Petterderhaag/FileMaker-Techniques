/*******************************************************************************
 * RadixFromNumber ( number ; characterSet )
 * Encodes numbers in an arbitrary $_radix.base specified by characterSet.
 * Results from converting fractional portions of numbers may be approximate
 * rather than exact.
 *
 * @parameter number: The (decimal) number to encode
 * @parameter characterSet: an ordered tuple of characters specifying the base
 *
 * @return text
 *
 * @history 2012-03-12 - Jeremy Bante <http://scr.im/fugue> - Created
 ******************************************************************************/

Case (
	/* Step 0, set-up */
	not $_radix.step ;
		Let ( [
			_number = Abs ( GetAsNumber ( number ) ) ;
			$_radix.base = Length ( characterSet ) ;

			$_radix.isNegative = number < 0 ;
			$_radix.integer = Int ( _number ) ;
			$_radix.fraction = Mod ( _number ; 1 ) ;

			// Constrain encoding of fraction to analogous significant digits
			$_radix.fractionBound =
				Ceiling (
					Ln ( 10 ^ ( Length ( $_radix.fraction ) - 1 ) )
					/ Ln ( $_radix.base )
				) ;

			$_radix.step =
				If ( $_radix.base < 2 ;
					-1 ;	// error, skip to end
					/* Else */ 1
				)
		] ;
			RadixFromNumber ( "" ; characterSet )
		) ;

	/* Step 1, encode integer portion of number */
	$_radix.step = 1 ;
		Let ( [
			_digit = Mod ( $_radix.integer ; $_radix.base ) ;
			_digit = Middle ( characterSet ; _digit + 1 ; 1 ) ;
			$_radix.integer = Div ( $_radix.integer ; $_radix.base ) ;
			$_radix.integerResult = _digit & $_radix.integerResult ;

			$_radix.step =
				Case (
					$_radix.integer ; $_radix.step ;
					$_radix.fraction ; $_radix.step + 1 ;
					/* Else */ 3	// skip to end
				)
		] ;
			RadixFromNumber ( "" ; characterSet )
		) ;

	/* Step 2, encode fractional portion of number */
	$_radix.step = 2 ;
		Let ( [
			$_radix.i = $_radix.i - 1 ;
			_digit = Div ( $_radix.fraction ; $_radix.base ^ $_radix.i ) ;
			_digit = Middle ( characterSet ; _digit + 1 ; 1 ) ;
			$_radix.fraction =
				Mod ( $_radix.fraction ; $_radix.base ^ $_radix.i ) ;
			$_radix.fractionResult = $_radix.fractionResult & _digit ;

			$_radix.step =
				If ( $_radix.fraction and -$_radix.i < $_radix.fractionBound ;
					$_radix.step ;	// not done encoding fraction
					/* Else */ $_radix.step + 1
				)
		] ;
			RadixFromNumber ( "" ; characterSet )
		) ;

	/* Step 3, clean-up and return result */
	$_radix.step = 3 or $_radix.step = -1 ;
		Let ( [
			_error = $_radix.step = -1 ;
			_result =
				If ( $_radix.isNegative ; "-" )
				& If ( not IsEmpty ( $_radix.integerResult ) ;
					$_radix.integerResult
				)
				& If ( not IsEmpty ( $_radix.fractionResult ) ;
					"." & $_radix.fractionResult
				) ;

			// Purge variables
			$_radix.base = "" ;
			$_radix.fraction = "" ;
			$_radix.fractionBound = "" ;
			$_radix.fractionResult = "" ;
			$_radix.i = "" ;
			$_radix.integer = "" ;
			$_radix.integerResult = "" ;
			$_radix.isNegative = "" ;
			$_radix.step = ""
		] ;
			If ( _error ; "?" ; /* Else */ _result )
		)
)