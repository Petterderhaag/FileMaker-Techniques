/*******************************************************************************
 * Quantile ( numberList ; theQuantile )
 * Finds a quantile of a list of numbers, i.e., the value in numberList such
 * that ValueCount ( numberList ) * theQuantile values of numberList are less
 * than that value.
 *
 * @parameter numberList: a return-delimited list of numbers
 * @parameter theQuantile: a number, 0 < theQuantile < 1
 *
 * @return A value from numberList
 *
 * @history 2011-05-16 - Jeremy Bante <http://scr.im/fugue> - Created
 * @history 2016-12-14 - Jeremy Bante <http-//scr.im/fugue> - Improving speed
 * by using the Quickselect algorithm.
 *
 * @see https://en.wikipedia.org/wiki/Quickselect
 ******************************************************************************/

 Case (
	/* Step 0, select pivot */
	not $~q.step ;
		Let ( [
			$~q.n = ValueCount ( numberList ) ;
			_firstValue = LeftValues ( numberList ; 1 ) ;
			$~q.number = GetAsNumber ( _firstValue ) ;
			_pivotPosition =
				If ( $~q.n < 3 ;
					1 ;
				/* Else */
					Ceiling ( $~q.n * ( theQuantile + 1 - Random ) / 2 )
				) ;
			// For short lists, choosing the first value for the pivot and
			// reversing the list order in the partitions guarantees that the
			// same pivot will not be selected twice in a row, leading to
			// degenerate recursion. Otherwise, using the mean of theQuantile
			// and a random value is a compromise between probabilistically
			// optimum speed on random lists and best speed when the numberList
			// is already (more-or-less) sorted.
			$~q.pivot = GetAsNumber ( GetValue ( numberList ; _pivotPosition ) ) ;
			$~q.pivot =
				If ( IsEmpty ( $~q.pivot ) ; $~q.number ; /* Else */ $~q.pivot ) ;
			$~q.step =
				Case (
					theQuantile ≤ 0 or theQuantile ≥ 1 ;	-1 ;	// bad input
					$~q.n < 2 ;	2 ;	// solution is trivial
					IsEmpty ( $~q.pivot ) ;	0 ;	// pick a new pivot
					/* Else */	1
				)
		] ;
			Quantile (
				Replace ( numberList ; 1 ; Length ( _firstValue ) ; "" ) ;
				GetAsNumber ( theQuantile )
			)
		) ;

	/* Step 1, partition numberList according to pivot */
	$~q.step = 1 and IsEmpty ( $~q.number ) ;
		Let ( [
			// Don't count empty values
			_nextValue = LeftValues ( numberList ; 1 ) ;
			$~q.number = GetAsNumber ( _nextValue ) ;
			$~q.n = $~q.n - 1 ;
			$~q.step = If ( $~q.i < $~q.n ; $~q.step ; /* Else */ $~q.step + 1 )
		] ;
			Quantile (
				Replace ( numberList ; 1 ; Length ( _nextValue ) ; "" ) ;
				theQuantile
			)
		) ;
	$~q.step = 1 and $~q.number = $~q.pivot ;
		Let ( [
			// Having this separate case prevents a degenerate scenario of a
			// list where all values are equal
			_nextValue = LeftValues ( numberList ; 1 ) ;
			$~q.number = GetAsNumber ( _nextValue ) ;
			$~q.i = $~q.i + 1 ;
			$~q.step = If ( $~q.i < $~q.n ; $~q.step ; /* Else */ $~q.step + 1 )
		] ;
			Quantile (
				Replace ( numberList ; 1 ; Length ( _nextValue ) ; "" ) ;
				theQuantile
			)
		) ;

	$~q.step = 1 and $~q.number < $~q.pivot ;
		Let ( [
			$~q.lowList = List ( $~q.number ; $~q.lowList ) ;
			// Reversing the order in partitions is part of a strategy to avoid
			// degenerate recursion in small lists, and also part of a strategy
			// to balance good speed between lists already (more-or-less) sorted
			// ascending vs. descending (in combination with pivot selection).
			$~q.lowN = $~q.lowN + 1 ;
			_nextValue = LeftValues ( numberList ; 1 ) ;
			$~q.number = GetAsNumber ( _nextValue ) ;
			$~q.i = $~q.i + 1 ;
			$~q.step = If ( $~q.i < $~q.n ; $~q.step ; /* Else */ $~q.step + 1 )
		] ;
			Quantile (
				Replace ( numberList ; 1 ; Length ( _nextValue ) ; "" ) ;
				theQuantile
			)
		) ;

	$~q.step = 1 ; // and $~q.number > $~q.pivot
		Let ( [
			$~q.highList = List ( $~q.number ; $~q.highList ) ;
			$~q.highN = $~q.highN + 1 ;
			_nextValue = LeftValues ( numberList ; 1 ) ;
			$~q.number = GetAsNumber ( _nextValue ) ;
			$~q.i = $~q.i + 1 ;
			$~q.step = If ( $~q.i < $~q.n ; $~q.step ; /* Else */ $~q.step + 1 )
		] ;
			Quantile (
				Replace ( numberList ; 1 ; Length ( _nextValue ) ; "" ) ;
				theQuantile
			)
		) ;

	/* Step 2, recurse on partition, or return result */
	$~q.step = 2 or $~q.step = -1 ;
		Let ( [
			// setup next partition
			_targetValue = Floor ( $~q.n * theQuantile ) + 1 ;
			_useLowList = $~q.lowN ≥ _targetValue ;
			_useHighList = $~q.highN > $~q.n - _targetValue ;
			_newList =
				Case (
					_useLowList ;	$~q.lowList ;
					_useHighList ;	$~q.highList
				) ;
			_newQuantile =
				Case (
					_useLowList ;
						theQuantile * $~q.n / $~q.lowN ;
					_useHighList ;
						Max (
							( theQuantile - 1 ) * $~q.n / $~q.highN + 1 ;
							1 / ( $~q.highN + 1 )
						)
				) ;

			// check for completion
			_error = $~q.step = -1 ;
			_listIsEmpty = $~q.n = 0 ;
			_result =
				Case (
					not ( _useLowList or _useHighList ) ;	$~q.pivot ;
					_useLowList and $~q.lowN = 1 ;	$~q.lowList ;
					_useHighList and $~q.highN = 1 ;	$~q.highList ;
					/* Else */	""
				) ;

			// purge variables
			$~q.highList = "" ;
			$~q.highN = "" ;
			$~q.i = "" ;
			$~q.lowList = "" ;
			$~q.lowN = "" ;
			$~q.n = "" ;
			$~q.number = "" ;
			$~q.pivot = "" ;
			$~q.step = ""
		] ;
			Case (
				_error ;	"?" ;
				not IsEmpty ( _result ) or _listIsEmpty ;	_result ;
				/* Else */	Quantile ( _newList ; _newQuantile )
			)
		)
)