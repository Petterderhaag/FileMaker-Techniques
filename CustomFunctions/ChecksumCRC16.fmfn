/*******************************************************************************
 * ChecksumCRC16 ( asciiText )
 * Computes a cyclic redundancy check (16 bit) for a string of text.
 *
 * @parameter asciiText: A string a text with character codes between 0 and 255.
 *
 * @return A number representing a 16-bit checksum
 *
 * @history 2014-06-26 - Jeremy Bante <http://scr.im/jbante> - Created
 *
 * @see http://en.wikipedia.org/wiki/Cyclic_redundancy_check
 ******************************************************************************/

Case (
	/* Step 0, set-up */
	not $~crc.step ;
		Let ( [
			$~crc.crc = 0 ;
			$~crc.i = 1 ;
			$~crc.byte = Code ( Middle ( asciiText ; $~crc.i ; 1 ) ) ;
			$~crc.step =
				Case (
					IsEmpty ( $~crc.byte ) ; -1 ;
					$~crc.byte > 255 ; -2 ;	// out of range
					/* Else */ 1
				)
		] ;
			ChecksumCRC16 ( asciiText )
		) ;

	/* Step 1, accumulate CRC */
	$~crc.step = 1 ;
		Let ( [
			// calculate CRC for $~crc.byte
			// _tableIndex = ( crc ^ byte )
			_bitPair1 =
				Mod ( Div ( $~crc.crc ; 64 ) ; 4 ) * 4
				+ Mod ( Div ( $~crc.byte ; 64 ) ; 4 ) ;
			_bitPair2 =
				Mod ( Div ( $~crc.crc ; 16 ) ; 4 ) * 4
				+ Mod ( Div ( $~crc.byte ; 16 ) ; 4 ) ;
			_bitPair3 =
				Mod ( Div ( $~crc.crc ; 4 ) ; 4 ) * 4
				+ Mod ( Div ( $~crc.byte ; 4 ) ; 4 ) ;
			_bitPair4 =
				Mod ( $~crc.crc ; 4 ) * 4
				+ Mod ( $~crc.byte ; 4 ) ;
			_tableIndex =
				64 * Choose ( _bitPair1 ;
					0 ; 1 ; 2 ; 3 ; 1 ; 0 ; 3 ; 2 ;
					2 ; 3 ; 0 ; 1 ; 3 ; 2 ; 1 ; 0
				)
				+ 16 * Choose ( _bitPair2 ;
					0 ; 1 ; 2 ; 3 ; 1 ; 0 ; 3 ; 2 ;
					2 ; 3 ; 0 ; 1 ; 3 ; 2 ; 1 ; 0
				)
				+ 4 * Choose ( _bitPair3 ;
					0 ; 1 ; 2 ; 3 ; 1 ; 0 ; 3 ; 2 ;
					2 ; 3 ; 0 ; 1 ; 3 ; 2 ; 1 ; 0
				)
				+ Choose ( _bitPair4 ;
					0 ; 1 ; 2 ; 3 ; 1 ; 0 ; 3 ; 2 ;
					2 ; 3 ; 0 ; 1 ; 3 ; 2 ; 1 ; 0
				) ;
			_tableValue =
				Choose ( _tableIndex ;
					0	; 49345	; 49537	; 320 ;
					49921	; 960	; 640	; 49729 ;
					50689	; 1728	; 1920	; 51009 ;
					1280	; 50625	; 50305	; 1088 ;
					52225	; 3264	; 3456	; 52545 ;
					3840	; 53185	; 52865	; 3648 ;
					2560	; 51905	; 52097	; 2880 ;
					51457	; 2496	; 2176	; 51265 ;
					55297	; 6336	; 6528	; 55617 ;
					6912	; 56257	; 55937	; 6720 ;
					7680	; 57025	; 57217	; 8000 ;
					56577	; 7616	; 7296	; 56385 ;
					5120	; 54465	; 54657	; 5440 ;
					55041	; 6080	; 5760	; 54849 ;
					53761	; 4800	; 4992	; 54081 ;
					4352	; 53697	; 53377	; 4160 ;
					61441	; 12480	; 12672	; 61761 ;
					13056	; 62401	; 62081	; 12864 ;
					13824	; 63169	; 63361	; 14144	;
					62721	; 13760	; 13440	; 62529 ;
					15360	; 64705	; 64897	; 15680 ;
					65281	; 16320	; 16000	; 65089 ;
					64001	; 15040	; 15232	; 64321 ;
					14592	; 63937	; 63617	; 14400 ;
					10240	; 59585	; 59777	; 10560 ;
					60161	; 11200	; 10880	; 59969 ;
					60929	; 11968	; 12160	; 61249 ;
					11520	; 60865	; 60545	; 11328 ;
					58369	; 9408	; 9600	; 58689 ;
					9984	; 59329	; 59009	; 9792 ;
					8704	; 58049	; 58241	; 9024 ;
					57601	; 8640	; 8320	; 57409 ;
					40961	; 24768	; 24960	; 41281 ;
					25344	; 41921	; 41601	; 25152 ;
					26112	; 42689	; 42881	; 26432 ;
					42241	; 26048	; 25728	; 42049 ;
					27648	; 44225	; 44417	; 27968 ;
					44801	; 28608	; 28288	; 44609 ;
					43521	; 27328	; 27520	; 43841 ;
					26880	; 43457	; 43137	; 26688 ;
					30720	; 47297	; 47489	; 31040 ;
					47873	; 31680	; 31360	; 47681 ;
					48641	; 32448	; 32640	; 48961 ;
					32000	; 48577	; 48257	; 31808 ;
					46081	; 29888	; 30080	; 46401 ;
					30464	; 47041	; 46721	; 30272 ;
					29184	; 45761	; 45953	; 29504 ;
					45313	; 29120	; 28800	; 45121 ;
					20480	; 37057	; 37249	; 20800 ;
					37633	; 21440	; 21120	; 37441 ;
					38401	; 22208	; 22400	; 38721 ;
					21760	; 38337	; 38017	; 21568 ;
					39937	; 23744	; 23936	; 40257 ;
					24320	; 40897	; 40577	; 24128 ;
					23040	; 39617	; 39809	; 23360 ;
					39169	; 22976	; 22656	; 38977 ;
					34817	; 18624	; 18816	; 35137 ;
					19200	; 35777	; 35457	; 19008 ;
					19968	; 36545	; 36737	; 20288 ;
					36097	; 19904	; 19584	; 35905 ;
					17408	; 33985	; 34177	; 17728 ;
					34561	; 18368	; 18048	; 34369 ;
					33281	; 17088	; 17280	; 33601 ;
					16640	; 33217	; 32897	; 16448
				) ;
			$~crc.crc = Div ( $~crc.crc ; 256 ) ;	// right bitshift 8

			// crc = tableValue ^ crc (16 bit)
			_bitPair1 =
				Mod ( Div ( _tableValue ; 16384 ) ; 4 ) * 4
				+ Mod ( Div ( $~crc.crc ; 16384 ) ; 4 ) ;
			_bitPair2 =
				Mod ( Div ( _tableValue ; 4096 ) ; 4 ) * 4
				+ Mod ( Div ( $~crc.crc ; 4096 ) ; 4 ) ;
			_bitPair3 =
				Mod ( Div ( _tableValue ; 1024 ) ; 4 ) * 4
				+ Mod ( Div ( $~crc.crc ; 1024 ) ; 4 ) ;
			_bitPair4 =
				Mod ( Div ( _tableValue ; 256 ) ; 4 ) * 4
				+ Mod ( Div ( $~crc.crc ; 256 ) ; 4 ) ;
			_bitPair5 =
				Mod ( Div ( _tableValue ; 64 ) ; 4 ) * 4
				+ Mod ( Div ( $~crc.crc ; 64 ) ; 4 ) ;
			_bitPair6 =
				Mod ( Div ( _tableValue ; 16 ) ; 4 ) * 4
				+ Mod ( Div ( $~crc.crc ; 16 ) ; 4 ) ;
			_bitPair7 =
				Mod ( Div ( _tableValue ; 4 ) ; 4 ) * 4
				+ Mod ( Div ( $~crc.crc ; 4 ) ; 4 ) ;
			_bitPair8 = Mod ( _tableValue ; 4 ) * 4 + Mod ( $~crc.crc ; 4 ) ;
			$~crc.crc =	// recombine bit pairs
				16384 * Choose ( _bitPair1 ;
					0 ; 1 ; 2 ; 3 ; 1 ; 0 ; 3 ; 2 ;
					2 ; 3 ; 0 ; 1 ; 3 ; 2 ; 1 ; 0
				)
				+ 4096 * Choose ( _bitPair2 ;
					0 ; 1 ; 2 ; 3 ; 1 ; 0 ; 3 ; 2 ;
					2 ; 3 ; 0 ; 1 ; 3 ; 2 ; 1 ; 0
				)
				+ 1024 * Choose ( _bitPair3 ;
					0 ; 1 ; 2 ; 3 ; 1 ; 0 ; 3 ; 2 ;
					2 ; 3 ; 0 ; 1 ; 3 ; 2 ; 1 ; 0
				)
				+ 256 * Choose ( _bitPair4 ;
					0 ; 1 ; 2 ; 3 ; 1 ; 0 ; 3 ; 2 ;
					2 ; 3 ; 0 ; 1 ; 3 ; 2 ; 1 ; 0
				)
				+ 64 * Choose ( _bitPair5 ;
					0 ; 1 ; 2 ; 3 ; 1 ; 0 ; 3 ; 2 ;
					2 ; 3 ; 0 ; 1 ; 3 ; 2 ; 1 ; 0
				)
				+ 16 * Choose ( _bitPair6 ;
					0 ; 1 ; 2 ; 3 ; 1 ; 0 ; 3 ; 2 ;
					2 ; 3 ; 0 ; 1 ; 3 ; 2 ; 1 ; 0
				)
				+ 4 * Choose ( _bitPair7 ;
					0 ; 1 ; 2 ; 3 ; 1 ; 0 ; 3 ; 2 ;
					2 ; 3 ; 0 ; 1 ; 3 ; 2 ; 1 ; 0
				)
				+ Choose ( _bitPair8 ;
					0 ; 1 ; 2 ; 3 ; 1 ; 0 ; 3 ; 2 ;
					2 ; 3 ; 0 ; 1 ; 3 ; 2 ; 1 ; 0
				) ;

			// setup next character
			$~crc.i = $~crc.i + 1 ;
			$~crc.byte = Code ( Middle ( asciiText ; $~crc.i ; 1 ) ) ;
			$~crc.step =
				Case (
					IsEmpty ( $~crc.byte ) ; $~crc.step + 1 ;	// end
					$~crc.byte > 255 ; -2 ;	// out of range
					/* Else */ $~crc.step
				)
		] ;
			ChecksumCRC16 ( asciiText )
		) ;

	/* Step 2, clean-up and return result */
	$~crc.step = 2 or $~crc.step < 0 ;
		Let ( [
			_result =
				Case (
					$~crc.step = -1 ;	// empty input
						0 ;

					$~crc.step = -2 ;
						"ERROR: Character out of range ("
						& $~crc.byte
						& ")" ;

					/* Else */
						$~crc.crc
				) ;

			// purge variables
			$~crc.byte = "" ;
			$~crc.crc = "" ;
			$~crc.i = "" ;
			$~crc.step = ""
		] ;
			_result
		)
)