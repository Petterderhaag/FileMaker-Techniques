/*******************************************************************************
 * BusinessDays ( startDate ; endDate )
 *
 * @parameter startDate: A date
 * @parameter endDate: A date, endDate ≥ startDate
 *
 * @return The number of business days (non-holiday weekdays) falling between
 * startDate and endDate, inclusive.
 *
 * @uses BusinessHolidays ( calendarYear )
 *
 * @history 2011-10-18 - Jeremy Bante <http://scr.im/jbante> - Created
 * @history 2011-10-19 - Jeremy Bante <http://scr.im/jbante> - correctly handle
 * multi-year ranges.
 * @history 2012-02-22 - Jeremy Bante <http://scr.im/jbante> - check for valid
 * input parameters, based on a comment by Brian Rich.
 ******************************************************************************/

Case (
	IsEmpty ( startDate ) or IsEmpty ( endDate ) ; "?" ;	// input is invalid
	startDate > endDate ; 0 - BusinessDays ( endDate ; startDate ) ;
/* Else */
	Let ( [
		// compare calendar years, in case range spans multiple years
		_startYear = Year ( startDate ) ;
		_endYear = Year ( endDate ) ;
		_splitDate =	// first 1 Jan after startDate
			Date ( 1 ; 1 ; _startYear + 1 ) ;
		_endDate =
			If ( _endYear > _startYear ; _splitDate - 1 ; /* Else */ endDate ) ;

		_startDay = DayOfWeek ( startDate ) ;
		_endDay = DayOfWeek ( _endDate ) ;

		_startSaturday = startDate - _startDay + 7 ;
		_endSaturday = _endDate - _endDay ;
		_fullWeeks = Div ( _endSaturday - _startSaturday + 1 ; 7 ) ;

		_leadingWeekDays =
			Choose ( _startDay - 1 ; 5 ; 5 ; 4 ; 3 ; 2 ; 1 ; 0 ) ;
		_trailingWeekDays =
			Choose ( _endDay - 1 ; 0 ; 1 ; 2 ; 3 ; 4 ; 5 ; 5 ) ;

		_holidayCalculation =
			"Let ( [ _d = GetAsDate (\""
			& BusinessHolidays ( _startYear )
			& "\" ) ; _n = DayOfWeek ( _d ) ] ; _d ≥ GetAsDate ( startDate ) and _d ≤ GetAsDate ( endDate ) and _n > 1 and _n < 7 )" ;
		_holidayCalculation = // Add 1 for each weekday holiday within range
			Substitute ( _holidayCalculation ;
				[ "¶" ; "\" ) ; _n = DayOfWeek ( _d ) ] ; _d ≥ GetAsDate ( startDate ) and _d ≤ GetAsDate ( endDate ) and _n > 1 and _n < 7 ) + Let ( [ _d = GetAsDate ( \"" ] ;
				[ "startDate" ; Quote ( startDate ) ] ;
				[ "endDate" ; Quote ( _endDate ) ]
			) ;
		_holidays = Evaluate ( _holidayCalculation )
	] ;
		5 * _fullWeeks
		+ _leadingWeekDays
		+ _trailingWeekDays
		- _holidays
		+ If ( _endYear > _startYear ;
			BusinessDays ( _splitDate ; endDate ) ;
			/* Else */ 0
		)
	)
)