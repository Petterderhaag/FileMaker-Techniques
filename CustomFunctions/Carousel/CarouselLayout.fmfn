/**
 * =====================================
 * CarouselLayout ( index )
 *		https://github.com/jbante/FileMaker-Techniques/blob/master/CustomFunctions/Carousel/CarouselLayout.fmfn
 *
 * PURPOSE:
 *		Finds the layout that would have the given layout number if hidden
 *		layouts and separators were omitted from the list of all layouts in the
 *		current file. This can be used to construct an index for files using
 *		carousel navigation. This navigation pattern can be particularly useful
 *		in files used as presentation devices, such as technique demonstration
 *		files.
 *
 * PARAMETERS:
 *		index: The logical layout number of the layout name to retrieve
 *
 * RETURNS:
 *		The name of the layout indicated by the logical index.
 *
 * DEPENDENCIES:
 *		This function requires developers to adhere to a layout naming
 *		convention for correct operation. Layouts that will be omitted from the
 *		normal sequence for a file must be prefixed with either "-" (like
 *		separator layouts) or "//" (like C++ style comments).
 *
 * HISTORY:
 *		MODIFIED on 2011-01-25 by Jeremy Bante to improve error handling.
 *		CREATED on 2011-01-20 by Jeremy Bante <http://scr.im/jbante>.
 * =====================================
 */

Case (
	/* Step 0, initialize processing */
	not $~step;
	Let ( [
		$~layoutNames = LayoutNames ( Get ( FileName ) );
		$~layoutCount = ValueCount ( $~layoutNames );
		$~step =
			If (	//index is out of bounds
				index < 1
				or index > $~layoutCount;
					3;	//skip to returning empty (error)

				/* Else */ 1
			)
	];
		CarouselLayout ( Int ( index ) )
	);

	/* Step 1, find layout name by index */
	$~step = 1;
	Let ( [
		$~i = $~i + 1;
		$~layout = GetValue ( $~layoutNames ; $~i );
		$~index =
			If (
				// layout is not hidden
				Left ( $~layout ; 1 ) ≠ "-" and Left ( $~layout ; 2 ) ≠ "//";
					$~index + 1;

				/* Else */
					$~index
			);
		$~step =
			Case (
				$~index = index ; 3;	// return result
				$~i = $~layoutCount ; 2;	// error, layout not found
				/* Else */ $~step
			)
	];
		CarouselLayout ( index )
	);

	/* Step 2, clear $~layout in event that correct layout can't be found */
	$~step = 2;
	Let ( [
		$~layout = "";
		$~step = $~step + 1
	];
		CarouselLayout ( index )
	);

	/* Step 3, clean-up */
	$~step = 3;
	Let ( [
		~layout = $~layout;

		// purge variables
		$~i = "";
		$~index = "";
		$~layoutCount = "";
		$~layoutNames = "";
		$~layout = "";
		$~step = ""
	];
		~layout
	)
)