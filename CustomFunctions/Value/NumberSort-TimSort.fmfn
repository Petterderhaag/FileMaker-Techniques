/**
 * NumberSort ( valueList )
 *
 * PURPOSE:
 *		Sorts the contents of valueList, assuming that each value is a number.
 *		To sort values as text, use the ValueSort function.
 *
 * PARAMETERS:
 *		valueList: A ¶-delimited list of values to sort
 *
 * RETURNS:
 *		A ¶-delimited list of the values from valueList in increasing order.
 *
 * NOTES:
 *		This function uses a variation on the timsort algorithm. This provides
 *		very good performance in terms of function call stack depth and
 *		calculation speed.
 *
 * HISTORY:
 *		MODIFIED on 2013-04-10 by Jeremy Bante <http://scr.im/fugue> to
 *		preserve non-numeric data (such as trailing decimal zeros) in sorted
 *		values.
 *		CREATED on 2011-04-13 by Jeremy Bante <http://scr.im/fugue>.
 *
 * REFERENCES:
 *		Timsort: http://bugs.python.org/file4451/timsort.txt
 */

Case (
	/* Step 0, initialize variables */
	not $~sort.step ;
		Let ( [
			$~sort.runStart		= 1 ;
			$~sort.runMin		= GetAsNumber ( GetValue ( valueList ; 1 ) ) ;
			$~sort.runMax		= GetAsNumber ( GetValue ( valueList ; 1 ) ) ;
			$~sort.valueCount	= ValueCount ( valueList ) ;
			$~sort.step			= 1
		] ;
			NumberSort ( valueList )
		) ;

	/* Step 1, search for runs */
	$~sort.step = 1 ;
		Let ( [
			~value			= GetValue ( valueList ; $~sort.runStart ) ;
			~number			= GetAsNumber ( ~value ) ;
			~isLastRun		= $~sort.runStart > $~sort.valueCount ;
			$~sort.runStart	= $~sort.runStart + 1
		] ;
			Case (
				~number < $~sort.runMin and not ~isLastRun ;
					Let ( [	// Append ~value to current run
						$~sort.runList	= List ( ~value ; $~sort.runList ) ;
						$~sort.runMin	= ~number ;
						$~sort.runSize	= $~sort.runSize + 1
					] ;
						NumberSort ( valueList )
					) ;

				~number ≥ $~sort.runMax and not ~isLastRun ;
					Let ( [	// Append ~value to current run
						$~sort.runList	= List ( $~sort.runList ; ~value ) ;
						$~sort.runMax	= ~number ;
						$~sort.runSize	= $~sort.runSize + 1
					] ;
						NumberSort ( valueList )
					) ;

				/* Else */
					Let ( [
						// Save run for merge
						$~sort.mergeList =
							List ( $~sort.mergeList ; $~sort.runList ) ;
						$~sort.mergeSizeList =
							List ( $~sort.mergeSizeList ; $~sort.runSize ) ;
						$~sort.mergeCount = $~sort.mergeCount + 1 ;

						// Reset run
						$~sort.runList	= ~value ;
						$~sort.runMin	= ~number ;
						$~sort.runMax	= ~number ;
						$~sort.runSize	= 1 ;

						$~sort.step =
							If ( ~isLastRun ; $~sort.step + 1 ; $~sort.step )
					] ;
						NumberSort ( valueList )
					)
			)
		) ;

	/* Step 2, initialize merge passes through valueList */
	$~sort.step = 2 ;
		Let ( [
			~oddRunSize =
				If ( Mod ( $~sort.runCount ; 2 ) ;	// Odd
					GetValue ( $~sort.runSizeList ; $~sort.runCount )
				) ;
			$~sort.sortedList =
				List (
					$~sort.mergeList ;
					RightValues ( $~sort.sortedList ; ~oddRunSize )
				) ;
			$~sort.runSizeList	= List ( $~sort.mergeSizeList ; ~oddRunSize ) ;
			$~sort.runCount		= ValueCount ( $~sort.runSizeList ) ;
			$~sort.runPair		= 1 ;
			$~sort.run2End		= "" ;

			$~sort.mergeList		= "" ;
			$~sort.mergeSizeList	= "" ;
			$~sort.mergeCount		= "" ;

			$~sort.step =
				If (	// There are no more merges to do
					$~sort.runCount ≤ 1 ;
						5 ;
					/* Else */
						$~sort.step + 1
				)
		] ;
			NumberSort ( "" )
		) ;

	/* Step 3, initialize merges of successive pairs of runs */
	$~sort.step = 3 ;
		Let ( [
			$~sort.run1Start = $~sort.run2End + 1 ;
			~run1Size =
				GetValue ( $~sort.runSizeList ; $~sort.runPair * 2 - 1 ) ;
			$~sort.run1End = $~sort.run1Start + ~run1Size - 1 ;
			$~sort.run1Value =
				GetValue ( $~sort.sortedList ; $~sort.run1Start ) ;
			$~sort.run1Number = GetAsNumber ( $~sort.run1Value ) ;
			$~sort.run1Max =
				GetAsNumber (
					GetValue ( $~sort.sortedList ; $~sort.run1End )
				) ;

			$~sort.run2Start = $~sort.run1End + 1 ;
			~run2Size = GetValue ( $~sort.runSizeList ; $~sort.runPair * 2 ) ;
			$~sort.run2End = $~sort.run2Start + ~run2Size - 1 ;
			$~sort.run2Value =
				GetValue ( $~sort.sortedList ; $~sort.run2Start ) ;
			$~sort.run2Number = GetAsNumber ( $~sort.run2Value ) ;
			$~sort.run2Max =
				GetAsNumber (
					GetValue ( $~sort.sortedList ; $~sort.run2End )
				) ;

			$~sort.mergeSizeList =
				List ( $~sort.mergeSizeList ; ~run1Size + ~run2Size ) ;
			$~sort.mergeCount	= $~sort.mergeCount + 1 ;
			$~sort.runPair		= $~sort.runPair + 1 ;

			$~sort.step			= $~sort.step + 1
		] ;
			NumberSort ( "" )
		) ;

	/* Step 4, merge pair of runs */
	$~sort.step = 4
	and $~sort.run1Max < $~sort.run2Number ;	// run1 is less
		Let ( [
			~run1 =
				Substitute (
					MiddleValues (
						$~sort.sortedList ;
						$~sort.run1Start ;
						$~sort.run1End - $~sort.run1Start + 1
					)
					& "¶END" ;
					[ "¶¶END" ; "" ] ; [ "¶END" ; "" ]
				) ;
			~run2 =
				Substitute (
					MiddleValues (
						$~sort.sortedList ;
						$~sort.run2Start ;
						$~sort.run2End - $~sort.run2Start + 1
					)
					& "¶END" ;
					[ "¶¶END" ; "" ] ; [ "¶END" ; "" ]
				) ;
			$~sort.mergeList = List ( $~sort.mergeList ; ~run1 ; ~run2 ) ;

			$~sort.step =
				If ( $~sort.runCount > $~sort.runPair * 2 - 1 ;
					$~sort.step - 1 ;
					/* Else */ $~sort.step - 2
				)
		] ;
			NumberSort ( "" )
		) ;

	$~sort.step = 4
	and $~sort.run1Number ≥ $~sort.run2Max ;	// run2 is less
		Let ( [
			~run1 =
				Substitute (
					MiddleValues (
						$~sort.sortedList ;
						$~sort.run1Start ;
						$~sort.run1End - $~sort.run1Start + 1
					)
					& "¶END" ;
					[ "¶¶END" ; "" ] ; [ "¶END" ; "" ]
				) ;
			~run2 =
				Substitute (
					MiddleValues (
						$~sort.sortedList ;
						$~sort.run2Start ;
						$~sort.run2End - $~sort.run2Start + 1
					)
					& "¶END" ;
					[ "¶¶END" ; "" ] ; [ "¶END" ; "" ]
				) ;
			$~sort.mergeList = List ( $~sort.mergeList ; ~run2 ; ~run1 ) ;
			$~sort.step =
				If ( $~sort.runCount > $~sort.runPair * 2 - 1 ;
					$~sort.step - 1 ;
					/* Else */ $~sort.step - 2
				)
		] ;
			NumberSort ( "" )
		) ;

	$~sort.step = 4
	and $~sort.run1Number < $~sort.run2Number ;	// run1Value is less
		Let ( [
			$~sort.mergeList	= List ( $~sort.mergeList ; $~sort.run1Value ) ;
			$~sort.run1Start	= $~sort.run1Start + 1 ;
			$~sort.run1Value =
				GetValue ( $~sort.sortedList ; $~sort.run1Start ) ;
			$~sort.run1Number = GetAsNumber ( $~sort.run1Value )
		] ;
			NumberSort ( "" )
		) ;

	$~sort.step = 4 ;	// run2Value is less
		Let ( [
			$~sort.mergeList	= List ( $~sort.mergeList ; $~sort.run2Value ) ;
			$~sort.run2Start	= $~sort.run2Start + 1 ;
			$~sort.run2Value =
				GetValue ( $~sort.sortedList ; $~sort.run2Start ) ;
			$~sort.run2Number = GetAsNumber ( $~sort.run2Value )
		] ;
			NumberSort ( "" )
		) ;

	/* Step 5, clean-up and return result */
	$~sort.step = 5 ;
		Let ( [
			~sortedList = $~sort.sortedList ;

			// purge variables
			$~sort.mergeList		= "" ;
			$~sort.mergeCount		= "" ;
			$~sort.mergeSizeList	= "" ;
			$~sort.run1End			= "" ;
			$~sort.run1Max			= "" ;
			$~sort.run1Number		= "" ;
			$~sort.run1Start		= "" ;
			$~sort.run1Value		= "" ;
			$~sort.run2End			= "" ;
			$~sort.run2Max			= "" ;
			$~sort.run2Number		= "" ;
			$~sort.run2Start		= "" ;
			$~sort.run2Value		= "" ;
			$~sort.runCount			= "" ;
			$~sort.runList			= "" ;
			$~sort.runMax			= "" ;
			$~sort.runMin			= "" ;
			$~sort.runPair			= "" ;
			$~sort.runSize			= "" ;
			$~sort.runSizeList		= "" ;
			$~sort.runStart			= "" ;
			$~sort.sortedList		= "" ;
			$~sort.step				= "" ;
			$~sort.valueCount		= ""
		] ;
			~sortedList
		)
)