/**
 * =====================================
 * ValueMap ( valueList ; expression )
 *
 * PURPOSE:
 *		Map repeatedly applies a calculation to each value in a ¶-delimited
 *		list. For each value in valueList, evaluates expression, substituting
 *		the value for each "~n" in expression. Expressions may also reference
 *		the value index (line number) being evaluated with "$~i". This is
 *		analogous to Map functionality in functional programming languages. This
 *		function assumes that valueList does not contain any double quote "
 *		characters.
 *
 * NOTE:
 *		This is the non-recursive version of this function. It is faster, but
 *		cannot handle lists as large as the recursive version. Exactly how large
 *		a list it can handle depends on the size of the expression and the sizes
 *		of values in the list.
 *
 * RETURNS:
 *		A ¶-delimited list of the results of evaluating expression on valueList.
 *
 * EXAMPLE:
 *		ValueMap (
 *			List ( "1 One" ; "2 Two" ; "3 Three"  );
 *			"Left ( ~n ; 1 ) + $~i"
 *		)	// = "2¶4¶6"
 *
 * PARAMETERS:
 *		valueList: A ¶-delimited list of inputs to expression
 *		expression: A calculation to evaluate
 *
 * DEPENDENCIES: none
 *
 * HISTORY:
 *		MODIFIED on 2011-12-23 by Jeremy Bante to include a value number in
 *		calculations.
 *		CREATED on 2011-11-11 by Jeremy Bante <http://scr.im/jbante>.
 *
 * REFERENCES:
 *		http://en.wikipedia.org/wiki/Map_(higher-order_function)
 * =====================================
 */

Let ( [
	~start = "Let ( [ $~i = $~i + 1 ; ~n = \"";
	~middle =
		"\" ] ; " & expression & " ) & \¶ & Let ( [ $~i = $~i + 1 ; ~ = \"";
	~end = "\" ] ; " & expression & " ) & Let ( $~i = \"\" ; \"\" )"
];
	Evaluate (
		~start
		& Substitute ( valueList ; ¶ ; ~middle )
		& ~end
	)
)