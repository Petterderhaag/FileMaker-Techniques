/**
 * =====================================
 * Crumb ( theLayoutNumber )
 *
 * PURPOSE:
 *		Constructs a Crumb "object" for the layout specified by the parameter.
 *
 * RETURNS:
 *		A series of name-value pairs
 *
 * PARAMETERS:
 *		theLayoutNumber: The sequential number (not the ID) for the layout to
 *		construct a Crumb object for.
 *
 * DEPENDENCIES:
 *		# ( name ; value )
 *
 * HISTORY:
 *		MODIFIED on 2011-05-13 by Jeremy Bante to acknowledge "~" as a flag for
 *		the isHidden attribute.
 *		CREATED on 2011-03-28 by Jeremy Bante <http://scr.im/jbantetsg>.
 * =====================================
 */

Let ( [
	~layoutName = GetValue ( LayoutNames ( Get ( FileName ) ) ; theLayoutNumber );

	~prefix1 = Left ( ~layoutName ; 1 );
	~prefix2 = Left ( ~layoutName ; 2 );
	~isSeparator = ~prefix1 = "-";
	~isHidden =
		~isSeparator
		or ~prefix1 = "~" // "private" entity convention
		or ~prefix1 = "#" // script or Python comment syntax
		or ~prefix2 = "//"; // calculation or C++ comment syntax

	~DELIMITER = ":";
	~layoutLength = Length ( ~layoutName );
	~delimiterPosition =
		Position ( ~layoutName ; ~DELIMITER ; ~layoutLength ; -1 );
	~moduleSubstitute =
		Substitute (
			If ( ~delimiterPosition; // delimiter was found
				Left ( ~layoutName ; ~delimiterPosition - 1 );
			/* Else */
				~layoutName
			);
			[ " " ; "" ] ; [ "	" ; "" ]; // remove whitespace
			[ "-" ; "" ] ; [ "#" ; "" ] ; [ "//" ; "" ] // remove comment syntax
		);
	~moduleStart =
		Position (
			~layoutName;
			Left ( ~moduleSubstitute ; 1 );
			1;
			1
		);
	~moduleEnd =
		Position (
			~layoutName;
			Right ( ~moduleSubstitute ; 1 );
			~delimiterPosition;
			-1
		);
	~module =
		If ( ~delimiterPosition; // delimiter was found
			Middle ( ~layoutName ; ~moduleStart ; ~moduleEnd - ~moduleStart + 1 );
		/* Else */
			Right ( ~layoutName ; ~layoutLength - ~moduleStart + 1 )
		);

	~pageSubstitute =
		Substitute (
			Right ( ~layoutName ; ~layoutLength - ~delimiterPosition );
			[ " " ; "" ] ; [ "	" ; "" ]; // remove whitespace
			[ "-" ; "" ] ; [ "#" ; "" ] ; [ "//" ; "" ] // remove comment syntax
		);
	~pageStart =
		Position (
			~layoutName;
			Left ( ~pageSubstitute ; 1 );
			~delimiterPosition + 1;
			1
		);
	~pageEnd =
		Position (
			~layoutName;
			Right ( ~pageSubstitute ; 1 );
			~layoutLength;
			-1
		);
	~page =
		If ( ~delimiterPosition; // delimiter was found
			Middle ( ~layoutName ; ~pageStart ; ~pageEnd - ~pageStart + 1 );
		/* Else */
			~module
		)
];
	If (
		not ~isSeparator
		and not IsEmpty ( ~layoutName );
			# ( "module" ; ~module )
			& # ( "page" ; ~page )
			& # ( "isHidden" ; ~isHidden )
			& # ( "layoutName" ; ~layoutName )
	)
)