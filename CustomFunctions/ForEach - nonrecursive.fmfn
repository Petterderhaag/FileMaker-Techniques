/*******************************************************************************
 *ForEach ( valueList ; expression )
 * ForEach repeatedly applies a calculation to each value in a ¶-delimited list.
 * For each value in valueList, evaluates expression, substituting the value for
 * each "~v" in expression. Expressions may also reference the value index (line
 * number) being evaluated with "~n". This is analogous to Map functionality in
 * functional programming languages.
 *
 * @example
 *	ForEach (
 *		List ( "1 One" ; "2 Two" ; "3 Three"  ) ;
 *		"Left ( ~v ; 1 ) + ~n"
 *	)	// = "2¶4¶6"
 *
 * @parameter valueList: A ¶-delimited list of inputs to expression
 * @parameter expression: A calculation to evaluate
 *
 * @return A ¶-delimited list of the results of evaluating expression on
 * valueList
 *
 * @history 2011-11-11 - Jeremy Bante <http://scr.im/jbante> - Created
 * @history 2011-12-23 - Jeremy Bante <http://scr.im/jbante> - include a value
 * number in calculations.
 * @history 2012-01-10 - Jeremy Bante <http://scr.im/jbante> - combine recursive
 * and non-recursive versions of the function, partly inspired by the CustomList
 * function by Agnès Barouh.
 * @history 2012-02-13 - Jeremy Bante <http://scr.im/jbante> - enable nested
 * calls.
 *
 * @see http://en.wikipedia.org/wiki/Map_(higher-order_function)
 ******************************************************************************/

Let ( [
	$~fe.i = $~fe.i + 1 ;
	_i = $~fe.i ;

	// build text of calculation to wrap around each value
	_start =
		"Let ( [ $~fe.n["
		& _i
		& "] = $~fe.n["
		& _i
		& "] + 1 ; ~n = $~fe.n["
		& _i
		& "] ; ~v = \"" ;
	_end =
		"\" ]; "
		& Substitute ( expression ; ¶ ; "" )
		& " )" ;
	~middle = _end & "¶& \¶ & " & _start
] ;
	Evaluate (
		_start	// wrap text of calculation around each value
		& Substitute ( valueList ;
			[ "\\" ; "\\\\" ] ;	// Quote() each value manually
			[ "\"" ; "\\\"" ] ;
			[ "\¶" ; "\\\¶" ] ;
			[ ¶ ; ~middle ]
		)
		& _end
	)
	& Let ( $~fe.n[_i] = "" ; "" )
)