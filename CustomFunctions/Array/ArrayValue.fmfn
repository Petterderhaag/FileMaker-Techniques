/*******************************************************************************
 * ArrayValue ( array ; index )
 * Retrieves the contents of a cell from an arbitrary-dimensional array.
 *
 * @parameter array: The array from which to extract a value
 * @parameter index: The index for the cell from which to extract a value. To
 * address values from multi-dimentional arrays, separate the index for each
 * dimension with ¶, or list the indices with the List function.
 *
 * @return The contents of the specified array cell. If the contents cannot be
 * retrieved (for example, if the cell does not exist) the function returns
 * Null.
 *
 * @history 2011-02-11 - Jeremy Bante <http://scr.im/fugue> - Created
 ******************************************************************************/

Let ( [
	_index = GetAsNumber ( GetValue ( index ; 1 ) ) ;
	_indexCount = ValueCount ( index ) ;
	_value = Evaluate ( GetValue ( array ; _index ) )
] ;
	Case (
		_indexCount = 1
		or IsEmpty ( _value ) ;
			_value ;

		/* Else */
			ArrayValue ( _value ; RightValues ( index ; _indexCount - 1 ) )
	)
)

/*
//Unit Test
Let ( [
	_value11 = Random ;
	_value12 = Random ;
	_value21 = Random ;
	_value22 = Random ;
	_row1 = List ( Quote ( _value11 ) ; Quote ( _value12 ) ) ;
	_row2 = List ( Quote ( _value21 ) ; Quote ( _value22 ) ) ;
	~array = List ( Quote ( _row1 ) ; Quote ( _row2 ) ) ;

	_test1 = "ArrayValue ( _row1 ; 1 )" ;
	_expected1 = _value11 ;
	_result1 = ArrayValue ( _row1 ; 1 ) ;
	_grade1 = If ( _result1 = _expected1 ; "Pass" ; /* Else */ "Fail" ) ;

	_test2 = "ArrayValue ( _row2 ; 2 )" ;
	_expected2 = _value22 ;
	_result2 = ArrayValue ( _row2 ; 2 ) ;
	_grade2 = If ( _result2 = _expected2 ; "Pass" ; /* Else */ "Fail" ) ;

	_test3 = "ArrayValue ( ~array ; List ( 1 ; 2 ) )" ;
	_expected3 = _value12 ;
	_result3 = ArrayValue ( ~array ; List ( 1 ; 2 ) ) ;
	_grade3 = If ( _result3 = _expected3 ; "Pass" ; /* Else */ "Fail" ) ;

	_test4 = "ArrayValue ( ~array ; List ( 2 ; 1 ) )" ;
	_expected4 = _value21 ;
	_result4 = ArrayValue ( ~array ; List ( 2 ; 1 ) ) ;
	_grade4 = If ( _result4 = _expected4 ; "Pass" ; /* Else */ "Fail" )
] ;
	List (
		_test1 & " = " & _result1 & " //" & _grade1 ;
		_test2 & " = " & _result2 & " //" & _grade2 ;
		_test3 & " = " & _result3 & " //" & _grade3 ;
		_test4 & " = " & _result4 & " //" & _grade4
	)
)
*/