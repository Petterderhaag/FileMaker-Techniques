/*******************************************************************************
 * CheckdigitDamm ( digitSequence )
 * Calculates a checkdigit to append to a digit sequence that can be used to
 * validate that the digit sequence has been transcribed correctly.
 *
 * This custom function implements an algorithm described by H. Michael Damm in
 * 2004.
 *
 * @parameter digitSequence: A sequence of decimal digits
 *
 * @return A single decimal digit, designed to be appended to the input
 *
 * @history 2014-04-21 - Jeremy Bante <http://scr.im/jbante> - Created
 *
 * @see http://en.wikipedia.org/wiki/Damm_algorithm
 ******************************************************************************/

Case (
	/* Step 0, set-up */
	not $~cdd.step ;
		Let ( [
			digitSequence = Filter ( digitSequence ; "0123456789" ) ;
			$~cdd.interim = 0 ;
			$~cdd.i = 1 ;
			$~cdd.digit = Middle ( digitSequence ; $~cdd.i ; 1 ) ;
			$~cdd.step = If ( IsEmpty ( $~cdd.digit ) ; 2 ; /* Else */ 1 )
		] ;
			CheckdigitDamm ( digitSequence )
		) ;

	/* Step 1, perform successive lookups from Damm's quasigroup */
	$~cdd.step = 1 ;
		Let ( [
			$~cdd.interim =
				Choose ( $~cdd.interim ;
					Choose ( $~cdd.digit ; 0 ; 3 ; 1 ; 7 ; 5 ; 9 ; 8 ; 6 ; 4 ; 2 ) ;
					Choose ( $~cdd.digit ; 7 ; 0 ; 9 ; 2 ; 1 ; 5 ; 4 ; 8 ; 6 ; 3 ) ;
					Choose ( $~cdd.digit ; 4 ; 2 ; 0 ; 6 ; 8 ; 7 ; 1 ; 3 ; 5 ; 9 ) ;
					Choose ( $~cdd.digit ; 1 ; 7 ; 5 ; 0 ; 9 ; 8 ; 3 ; 4 ; 2 ; 6 ) ;
					Choose ( $~cdd.digit ; 6 ; 1 ; 2 ; 3 ; 0 ; 4 ; 5 ; 9 ; 7 ; 8 ) ;
					Choose ( $~cdd.digit ; 3 ; 6 ; 7 ; 4 ; 2 ; 0 ; 9 ; 5 ; 8 ; 1 ) ;
					Choose ( $~cdd.digit ; 5 ; 8 ; 6 ; 9 ; 7 ; 2 ; 0 ; 1 ; 3 ; 4 ) ;
					Choose ( $~cdd.digit ; 8 ; 9 ; 4 ; 5 ; 3 ; 6 ; 2 ; 0 ; 1 ; 7 ) ;
					Choose ( $~cdd.digit ; 9 ; 4 ; 3 ; 8 ; 6 ; 1 ; 7 ; 2 ; 0 ; 5 ) ;
					Choose ( $~cdd.digit ; 2 ; 5 ; 8 ; 1 ; 4 ; 3 ; 6 ; 7 ; 9 ; 0 )
				) ;
			$~cdd.i = $~cdd.i + 1 ;
			$~cdd.digit = Middle ( digitSequence ; $~cdd.i ; 1 ) ;
			$~cdd.step = If ( IsEmpty ( $~cdd.digit ) ; 2 ; /* Else */ 1 )
		] ;
			CheckdigitDamm ( digitSequence )
		) ;

	/* Step 2, clean-up and return result */
	$~cdd.step = 2 ;
		Let ( [
			~result = $~cdd.interim ;

			// purge variables
			$~cdd.digit = "" ;
			$~cdd.i = "" ;
			$~cdd.interim = "" ;
			$~cdd.step = ""
		] ;
			~result
		)
)