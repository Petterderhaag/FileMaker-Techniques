/*
 * THIS FUNCTION IS DEPRECATED. FILEMAKER INTRODUCED OFFICIAL SUPPORT FOR THE
 * GET ( CURRENTTIMEUTCMILLISECONDS ) FUNCTION IN FILEMAKER 13.
 * USE UUIDTimeDevice INSTEAD.
 */

/**
 * =====================================
 * UUIDUTC
 *		https://github.com/jbante/FileMaker-Techniques/blob/master/CustomFunctions/UUID/UUIDUTCHash.fmfn
 *
 * PURPOSE:
 *		Creates a universally unique identifier suitable for use as a primary
 *		key in FileMaker number fields. The UUID is an encoding of the creation
 *		UTC timestamp (accurate to milliseconds), a serial number, and a unique
 *		ID for the device derived from the Get ( PersistentID ) function. The
 *		values returned by this and related functions have a one-to-one
 *		correspondence with UUIDs following the RFC 4122 standard all values in
 *		the format generated by this function can be converted to RFC 4122, and
 *		vice versa.
 *
 * RETURNS:
 *		A 41-digit delimited number of the form:
 *		v-r-tttttttttttt-tttssss-ccccc-nnnnnnnnnnnnnnn
 *		The sections of the UUID correspond to:
 *		v: A UUID version (type) number
 *		r: A variant code reserved by the RFC 4122 standard
 *		t: The creation UTC timestamp (milliseconds since 0001-01-01T00:00:00)
 *		s: A serial number, reset for each millisecond
 *		c: A session key, randomly generated for each session
 *		n: A device identifier derived from Get ( PersistentID )
 *
 * PARAMETERS: none
 *
 * DEPENDENCIES: none
 *
 * VARIABLES:
 *		$$~UUID.DATA[3]
 *
 * NOTES:
 *		This function uses the Get ( UTCmSecs ) function. It exists and works as
 *		of FileMaker version 12v2, but it is not documented. There is a
 *		reasonable possibility that Get ( UTCmSecs ) will cease to work in
 *		future versions of FileMaker.
 *
 *		For most practical purposes, FileMaker will ignore the text delimiters
 *		in values returned by this function when stored in a number field.
 *
 *		This function generates UUIDs that are meaningfully sortable. Values
 *		sort by version, then approximate creation order. Values generated by
 *		this function may not sort in correct creation order with values created
 *		by the UUIDTimeNIC or UUIDTimestamp functions due to time zone
 *		differences. Because of the leading sort by version, random (version 4)
 *		values (where the creation order cannot be determined by the values)
 *		will cluster separately from timestamp-node (version 1) values.
 *
 *		The value can be converted to RFC 4122 canonical form (hexadecimal) with
 *		the UUIDGetAsRFC4122 function. The creation timestamp and NIC (MAC)
 *		address can be extracted with the UUIDGetTimestamp and UUIDGetNICAddress
 *		functions.
 *
 * HISTORY:
 *		CREATED on 2012-09-13 by Jeremy Bante <http://scr.im/jbante>.
 *
 * REFERENCES:
 *		Key values Best Practice: http://filemakerstandards.org/pages/viewpage.action?pageId=557138
 *		RFC 4122 standard UUID specification: http://tools.ietf.org/html/rfc4122
 *		UUID functions: https://github.com/jbante/FileMaker-Techniques/tree/master/CustomFunctions/UUID
 * =====================================
 */

Case (
	/* First call to UUIDUTC, check for pre-processed node data */
	not $~uuid.step ;
		Let ( [
				$~uuid.node = GetValue ( $$~UUID.DATA[3] ; 4 ) ;
				$~uuid.step =
					If ( IsEmpty ( $~uuid.node ) ; 1 ; /* Else */ 3 ) ;
				$~uuid.id_Device =
					If ( $~uuid.step = 1 ; Left ( Get ( PersistentID ) ; 12 ) )
		] ;
			UUIDUTC
		) ;

	/* Parse device ID from hexadecimal to a (base 10) number */
	$~uuid.step = 1 ;
		Let ( [
			~deviceDigit = Middle ( $~uuid.id_Device ; 12 - $~uuid.i ; 1 ) ;
			~deviceDigit =	// convert digit to number
				Position ( "0123456789abcdef" ; ~deviceDigit ; 1 ; 1 ) - 1 ;
			$~uuid.node =	// add digit to node
				~deviceDigit * ( 16 ^ $~uuid.i ) + $~uuid.node ;
			$~uuid.step =
				If ( $~uuid.i < 11 ; $~uuid.step ; /*else*/ $~uuid.step + 1  ) ;
			$~uuid.i = $~uuid.i + 1
		] ;
			UUIDUTC
		) ;

	/* Set multicast bit to avoid colliding with NIC addresses */
	$~uuid.step = 2 ;
		Let ( [
			~left = Div ( $~uuid.node ; 2199023255552 ) ;	// 2^41
			~right = Mod ( $~uuid.node ; 1099511627776 ) ;	// 2^40
			$~uuid.node = ( ~left * 2 + 1 ) * 1099511627776 + ~right ;
			$~uuid.step = $~uuid.step + 1
		] ;
			UUIDUTC
		) ;

	/* Concatenate information */
	$~uuid.step = 3 ;
		Let ( [
			// Set-up timestamp, serial number, and session key
			~session = GetValue ( $$~UUID.DATA[3] ; 1 ) ;
			~lastTimestamp = GetValue ( $$~UUID.DATA[3] ; 2 ) ;
			~serial = GetAsNumber ( GetValue ( $$~UUID.DATA[3] ; 3 ) ) ;

			~now = Mod ( Get ( UTCmSecs ) ; 165208454460000 ) ;
			~session =
				Case (
					IsEmpty ( ~session ) ;	// new session
						Floor ( Random * 16384 ) ;

					~serial ≥ .9999	// serial number overflow
					and ~now = ~lastTimestamp
					or ~now < ~lastTimestamp ;	// clock change
						Mod ( ~session + 1 ; 16384 ) ;

					/* Else */
						~session
				) ;
			~magnitude = Max ( Floor ( ~serial * 10 ) ; 1 ) ;
			~serial =
				Case (
					~now ≠ ~lastTimestamp or ~serial = .9999 ; 0 ;
					~serial = 0 ; .1 ;
					~serial < .4 ; ~serial + 10 ^ ( 0 - ~magnitude ) ;
					/* Else */ ~serial + 10 ^ -4
				) ;
			~node = $~uuid.node ;

			// Store data for future reference
			$$~UUID.DATA[3] = List ( ~session ; ~now ; ~serial ; ~node ) ;

			// purge variables
			$~uuid.i = "" ;
			$~uuid.id_Device = "" ;
			$~uuid.node = "" ;
			$~uuid.step = ""
		] ;
			// v-r-tttt tttt tttt ttt-ssss-ccccc-nnnnn nnnnn nnnnn
			"12" //version and reserved variant code
			// "1-2-"
			& Right ( "000000000000000" & ~now ; 15 )
			// & "-"
			& Left ( Substitute ( ~serial ; "." ; "" ) & "0000" ; 4 )
			// & "-"
			& Right ( "00000" & ~session ; 5 )
			// & "-"
			& Right ( "000000000000000" & ~node ; 15 )
		)
)