/*******************************************************************************
 * UUIDTimeDevice
 * https://github.com/jbante/FileMaker-Techniques/blob/master/CustomFunctions/UUID/UUIDTimeDevice.fmfn
 *
 * Creates a universally unique identifier suitable for use as a primary key in
 * FileMaker number fields. The UUID is an encoding of the creation timestamp, a
 * serial number, and an identifier of the device that created the UUID. The
 * device ID is based on FileMaker's Get ( PersistentID ) function, which is in
 * turn based on Apple's IDVA (identifier for vendor). The values returned by
 * this and related functions have a one-to-one correspondence with UUIDs
 * following the RFC 4122 standard. All values in the format generated by this
 * function can be converted to RFC 4122, and vice versa.
 *
 * This function generates UUIDs that are meaningfully sortable. Values sort by
 * version, then approximate creation order. Because of the leading sort by
 * version, random (version 4) values (where the creation order cannot be
 * determined by the values) will cluster separately from timestamp-node
 * (version 1) values.
 *
 * The value can be converted to RFC 4122 canonical form (hexadecimal) with the
 * UUIDGetAsRFC4122 function. The creation timestamp can be extracted with the
 * UUIDGetTimestamp function.
 *
 * @return A 41-digit number of the form:
 *		vrttttttttttttssssssscccccnnnnnnnnnnnnnnn
 *		The sections of the UUID correspond to:
 *		v: A UUID version (type) number
 *		r: A variant code reserved by the RFC 4122 standard
 *		t: The creation timestamp (seconds since 0001-01-01T00:00:00)
 *		s: A serial number, reset for each second
 *		c: A session key, randomly generated for each session
 *		n: The device ID ("node") of the device that created the UUID
 *
 * @global $$~UUID.DATA
 *
 * @history 2013-09-23 - Jeremy Bante <http://scr.im/jbante> - Created
 *
 * @see http://filemakerstandards.org/pages/viewpage.action?pageId=557138 Key values best practice
 * @see http://tools.ietf.org/html/rfc4122 RFC 4122 standard UUID specification
 * @see http://help.filemaker.com/app/answers/detail/a_id/12074 FileMaker device ID behavior documentation
 ******************************************************************************/

Case (
	/* First call to UUIDTimeDevice, check for pre-processed node data */
	not $~uuid.step ;
		Let ( [
				$~uuid.node = GetValue ( $$~UUID.DATA ; 4 ) ;
				$~uuid.step =
					If ( IsEmpty ( $~uuid.node ) ; 1 ; /* Else */ 3 ) ;
				$~uuid.deviceID =
					If ( $~uuid.step = 1 ; Left ( Get ( PersistentID ) ; 12 ) )
		] ;
			UUIDTimeDevice
		) ;

	/* Parse device ID from hexadecimal to a (base 10) number */
	$~uuid.step = 1 ;
		Let ( [
			~digit = Middle ( $~uuid.deviceID ; 12 - $~uuid.i ; 1 ) ;
			~digit =	// convert digit to number
				Position ( "0123456789abcdef" ; ~digit ; 1 ; 1 ) - 1 ;
			$~uuid.node =	// add digit to node
				~digit * ( 16 ^ $~uuid.i ) + $~uuid.node ;
			$~uuid.step =
				If ( $~uuid.i < 11 ;
					$~uuid.step ;
					/* Else */ $~uuid.step + 1
				) ;
			$~uuid.i = $~uuid.i + 1
		] ;
			UUIDTimeDevice
		) ;

	/* Set multicast bit to avoid colliding with NIC addresses */
	$~uuid.step = 2 ;
		Let ( [
			~left = Div ( $~uuid.node ; 2199023255552 ) ;	// 2^41
			~right = Mod ( $~uuid.node ; 1099511627776 ) ;	// 2^40
			$~uuid.node = ( ~left * 2 + 1 ) * 1099511627776 + ~right ;
			$~uuid.step = $~uuid.step + 1
		] ;
			UUIDTimeDevice
		) ;

	/* Concatenate information */
	$~uuid.step = 3 ;
		Let ( [
			// Set-up timestamp, serial number, and session key
			~session = GetValue ( $$~UUID.DATA ; 1 ) ;
			~lastTimestamp = GetValue ( $$~UUID.DATA ; 2 ) ;
			~serial = GetAsNumber ( GetValue ( $$~UUID.DATA ; 3 ) ) ;

			~now =
				Mod (
					GetAsNumber ( Get ( CurrentHostTimeStamp ) ) ;
					165208454460
				) ;
			~session =
				Case (
					IsEmpty ( ~session ) ;	// new session
						Floor ( Random * 16384 ) ;

					~serial ≥ .9999999	// serial number overflow
					and ~now = ~lastTimestamp
					or ~now < ~lastTimestamp ;	// clock change
						Mod ( ~session + 1 ; 16384 ) ;

					/* Else */
						~session
				) ;
			~magnitude =
				Max (
					Left ( Substitute ( ~serial ; "." ; "" ) ; 1 ) ;
					1
				) ;
			~serial =
				Case (
					~now ≠ ~lastTimestamp or ~serial = .9999999 ; 0 ;
					~serial = 0 ; .1 ;
					~serial < .7 ; ~serial + 10 ^ ( 0 - ~magnitude ) ;
					/* Else */ ~serial + 10 ^ -7
				) ;
			~node =
				If ( not IsEmpty ( $~uuid.node ) ;
					$~uuid.node ;
				/* Else, new random node */
					// set multicast bit to avoid colliding with NIC addresses
					( Floor ( Random * 128 ) *2 + 1 ) * 1099511627776
					+ Floor ( Random * 1099511627776 )
				) ;

			// Store data for future reference
			$$~UUID.DATA = List ( ~session ; ~now ; ~serial ; ~node ) ;

			//purge variables
			$~uuid.i = "" ;
			$~uuid.deviceID = "" ;
			$~uuid.node = "" ;
			$~uuid.step = ""
		] ;
			// v r tttt tttt tttt sss ssss ccccc nnnnn nnnnn nnnnn
			"12" //version and reserved variant code
			& Right ( "000000000000" & ~now ; 12 )
			& Left ( Substitute ( ~serial ; "." ; "" ) & "0000000" ; 7 )
			& Right ( "00000" & ~session ; 5 )
			& Right ( "000000000000000" & ~node ; 15 )
		)
)