/*******************************************************************************
 * RandomPoisson ( mean )
 * Returns sample values from a Poisson distribution.
 *
 * @parameter mean: a number, mean > 0
 *
 * @return a number
 *
 * @history 2011-05-15 - Jeremy Bante <http://scr.im/fugue> - Created
 *
 * @see http://en.wikipedia.org/wiki/Poisson_distribution
 ******************************************************************************/

Case (
	/* Step 0: initialize process */
	not $~step ;
	Let ( [
		$~random = Random ;

		$~i = 0 ;
		$~probability = Exp ( 0 - mean ) ;
		$~cumulativeProbability = $~probability ;

		$~step =
			Case (
				mean ≤ 0 ; 2 ;	// value is out of bounds, skip to end
				$~random < $~cumulativeProbability ; 2 ;	// result is found
				/* Else */ $~step + 1
			)
	] ;
		RandomPoisson ( mean )
	) ;

	/* Step 1: find cumulative probability to match random value */
	$~step = 1 ;
	Let ( [
		$~i = $~i + 1 ;
		$~probability =	// recursive Poisson density
			 mean * $~probability / $~i ;
		$~cumulativeProbability = $~cumulativeProbability + $~probability ;

		$~step =
			If ( $~random < $~cumulativeProbability ;	// result is found
				$~step + 1 ;
				/* Else */ $~step
			)
	] ;
		RandomPoisson ( mean )
	) ;

	/* Step 2: clean-up and return result */
	$~step = 2 ;
	Let ( [
		_value = $~i ;

		// purge variables
		$~cumulativeProbability = "" ;
		$~i = "" ;
		$~probability = "" ;
		$~random = "" ;
		$~step = ""
	] ;
		If ( mean > 0 ;	// value is within bounds
			_value ;
			/* Else */ "?"
		)
	)
)