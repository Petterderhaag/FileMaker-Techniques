/**
 * =====================================
 * KeyIsValid ( theKey )
 *
 * RETURNS:
 *		True (1) if theKey is a valid key value based on its Verhoeff check
 *		digit; False (0) otherwise.
 *
 * PARAMETERS:
 *		theKey
 *
 * DEPENDENCIES: none
 *
 * HISTORY:
 *		CREATED on 2011-12-08 by Jeremy Bante <http://scr.im/jbante>.
 *
 * REFERENCES:
 *		Verhoeff Check Digit: http://en.wikipedia.org/wiki/Verhoeff_algorithm
 * =====================================
 */

Case (
	/* Step 0; process checkSum */
	not $~key.step;
		Let ( [
			~digit = Right ( theKey ; 1 );
			~newKey = Left ( theKey ; Length ( theKey ) - 1 );

			$~key.i = $~key.i + 1;
			~position = Mod ( $~key.i - 1 ; 8 );
			~permutation =
				Middle (
					"01234567891576283094580379614289160435279453126870428657390127938064157046913258";
					~position * 10 + ~digit + 1;
					1
				);
			$~key.checkDigit =
				Middle (
					"0123456789123406789523401789563401289567401239567859876043216598710432765982104387659321049876543210";
					$~key.checkDigit * 10 + ~permutation + 1;
					1
				);

			$~key.step =
				If ( IsEmpty ( ~newKey );
					$~key.step + 1;
					/* Else */ $~key.step
				)
		];
			KeyIsValid ( ~newKey )
		);

	/* Step 1; clean-up and return result */
	$~key.step = 1;
		Let ( [
			~result = not $~key.checkDigit;	// valid if checkSum = 0

			// Purge variables
			$~key.checkDigit = "";
			$~key.i = "";
			$~key.step = ""
		];
			~result
		)
)