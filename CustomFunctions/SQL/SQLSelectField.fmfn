/**
 * =====================================
 * SQLSelectField ( selectField ; matchField ; matchValue )
 *
 * PURPOSE:
 *		Serves as a wrapper for a basic one-column SQL query with one match
 *		value on one match field. Leave matchField and matchValue empty to
 *		select all values in the field.
 *
 * RETURNS:
 *		The result from the ExecuteSQL function.
 *
 * PARAMETERS:
 *		selectField: A reference to the field to retrieve values from
 *		matchField: A reference to the field to match records on
 *		matchValue: The value to match on in the specified records
 *
 * DEPENDENCIES: none
 *
 * HISTORY:
 *		MODIFIED on 2013-01-29 by Jeremy Bante <http://scr.im/fugue> to fix a
 *		bug where the matchField parameter was not correctly recognized.
 *		MODIFIED on 2013-01-21 by Jeremy Bante <http://scr.im/fugue> to fix a
 *		bug where the table name was used instead of the field name in the where
 *		clause.
 *		CREATED on 2012-12-18 by Jeremy Bante <http://scr.im/fugue>.
 *		Based on a function by Todd Geist.
 * =====================================
 */

Let ( [
	~selectFieldName = Substitute ( GetFieldName ( selectField ) ; "::" ; ¶ ) ;
	~selectTableName = GetValue ( ~selectFieldName ; 1 ) ;
	~selectFieldName = GetValue ( ~selectFieldName ; 2 ) ;
	~matchFieldName = GetFieldName ( matchField ) ;
	~match = not IsEmpty ( ~matchFieldName ) and not IsEmpty ( matchValue ) ;
	~sql =
		"SELECT "
		& Quote ( ~selectFieldname )
		& " FROM "
		& Quote ( ~selectTableName )
		& If ( ~match ;	// only include WHERE clause if match parameters exist
			" WHERE "
			& Quote ( GetValue (
				Substitute ( ~matchFieldName ; "::" ; ¶ ) ;
				2
			) )
			& " = ?"
		)
];
	If ( ~match ;
		ExecuteSQL ( ~sql ; "" ; "" ; matchValue );
		/* Else */ ExecuteSQL ( ~sql ; "" ; "" )
	)
)