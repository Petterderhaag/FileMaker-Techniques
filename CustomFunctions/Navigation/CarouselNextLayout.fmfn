/**
 * =====================================
 * CarouselNextLayout
 *		https://github.com/jbante/FileMaker-Techniques/blob/master/CustomFunctions/Carousel/CarouselNextLayout.fmfn
 *
 * PURPOSE:
 *		Finds the logical next layout in carousel-style system navigation. This
 *		navigation pattern can be particularly useful in files used as
 *		presentation devices, such as technique demonstration files.
 *
 * PARAMETERS: none
 *
 * RETURNS:
 *		The name of the logical next layout.
 *
 * DEPENDENCIES:
 *		This function requires developers to adhere to a layout naming
 *		convention for correct operation. Layouts that will be omitted from the
 *		normal sequence for a file must be prefixed with a comment syntax:
 *		-	- (separator layouts)
 *		-	// (C++ style comments)
 *		-	# (FileMaker script style comments)
 *		-	~ (private objects according to FileMakerStandards.org)
 *
 * HISTORY:
 *		MODIFIED on 2011-10-24 by Jeremy Bante to accept the tilde "~" as a
 *		comment prefix.
 *		MODIFIED on 2011-01-25 by Jeremy Bante to not set global variables for
 *		next and previous layouts.
 *		CREATED on 2011-01-20 by Jeremy Bante <http://scr.im/jbante>.
 * =====================================
 */

Case (
	/* Step 0, initialize processing */
	not $~step;
	Let ( [
		$~layoutNames = LayoutNames ( Get ( FileName ) );
		$~layoutCount = ValueCount ( $~layoutNames );
		$~layoutNumber = Get ( LayoutNumber );
		$~i = $~layoutNumber;
		$~step = 1
	];
		CarouselNextLayout
	);

	/* Step 1, find the next layout to navigate to */
	$~step = 1;
	Let ( [
		$~i = If ( $~i = $~layoutCount ; 1 ; /* Else */ $~i + 1 );
		$~nextLayout = GetValue ( $~layoutNames ; $~i );
		~prefix1 = Left ( $~nextLayout ; 1 );
		~prefix2 = Left ( $~nextLayout ; 2 );
		~isHidden =
			~prefix1 = "-"	// separator layout
			or ~prefix1 = "~"	// "private" entity convention
			or ~prefix1 = "#"	// script or Python comment syntax
			or ~prefix2 = "//";	// calculation or C++ comment syntax
		$~step =
			If (
				not ~isHidden	// skip separators and hidden layouts
				or $~i = $~layoutNumber;	// search is exhausted
					$~step + 1;

				/*else*/ $~step
			)
	];
		CarouselNextLayout
	);

	/* Step 2, clean-up */
	$~step = 2;
	Let ( [
		~nextLayout = $~nextLayout;

		//purge variables
		$~i = "";
		$~layoutCount = "";
		$~layoutNames = "";
		$~layoutNumber = "";
		$~nextLayout = "";
		$~step = ""
	];
		~nextLayout
	)
)