/*******************************************************************************
 * LocationEndPoint ( startLatitude ; startLongitude ; azimuth ; distanceInMeters )
 * Calculates the latitude and longitude for the end location of a path on the
 * surface of the Earth based on the starting location, direction, and distance.
 *
 * @parameter startLatitude: Latitude of the start point, in degrees
 * @parameter startLongitude: Longitude of the start point, in degrees
 * @parameter azimuth: The direction at the start of the path, in degrees
 * clockwise from due north in [0,360)
 * @parameter distanceInMeters: The length of the path, in meters
 *
 * @return A return-delimited list of data about the destination point of the
 * path:
 *		1. latitude of the destination point
 *		2. longitude of the destination point
 *		3. forward azimuth of the path at the destination
 *
 * @history 2014-09-15 - Jeremy Bante <http://scr.im/fugue> - Created
 * @history 2015-04-09 - Jeremy Bante <http://scr.im/fugue> - Corrected
 * calculations
 *
 * @see http://www.dtic.mil/dtic/tr/fulltext/u2/703541.pdf
 * @see http://en.wikipedia.org/wiki/World_Geodetic_System
 ******************************************************************************/

If ( azimuth > 180 ;
	// the calculation assumes west direction, so reverse inputs and result
	Let ( [
		_values =
			LocationEndPoint (
				0 - startLatitude ;
				0 - startLongitude ;
				azimuth - 180 ;
				distanceInMeters
			)
	] ;
		List (
			0 - GetValue ( _values ; 1 ) ;
			0 - GetValue ( _values ; 2 ) ;
			Mod ( GetValue ( _values ; 3 ) + 180 ; 360 )
		)
	) ;

/* Else */
	Let ( [
		_equatorialRadius = 6378137 ;	// meters
		_flattening = .0033528106647475 ;	// 1 / 298.257223563
		_oneMinusFlattening = 1 - _flattening ;

		_tanθ1 = _oneMinusFlattening * Tan ( Radians ( startLatitude ) ) ;
		_θ1 = Atan ( _tanθ1 ) ;
		_sinθ1 = Sin ( _θ1 ) ;
		_cosθ1 = Cos ( _θ1 ) ;

		_azimuth = Radians ( azimuth ) ;
		_sinAzimuth = Sin ( _azimuth ) ;
		_cosAzimuth = Cos ( _azimuth ) ;
		_mm = _cosθ1 * _sinAzimuth ;
		_nn = _cosθ1 * _cosAzimuth ;

		_c1 = _flattening * _mm ;
		_c2 = .25 * ( 1 - _mm ^ 2 ) * _flattening ;
		_dd = ( 1 - _c2 ) * ( 1 - _c2 - _c1 * _mm ) ;
		_pp = _c2 * ( 1 + .5 * _c1 * _mm ) / _dd ;

		_σ1 = Acos ( _sinθ1 / Sin ( Acos ( _mm ) ) ) ;
		_d = distanceInMeters / ( _equatorialRadius * _dd ) ;
		_sin_d = Sin ( _d ) ;
		_cos_d = Cos ( _d ) ;
		_u = 2 * ( _σ1 - _d ) ;
		_cos_u = Cos ( _u ) ;

		_vv = _cos_u * _cos_d - Sin ( _u ) * _sin_d ;
		_Δσ =
			_d
			+ _c2 ^ 2 * _sin_d * _cos_d * ( 2 * _vv ^ 2 - 1 )
			- 2 * _pp * _vv * ( 1 - 2 * _pp * _cos_u ) * _sin_d ;
		_sinΔσ = Sin ( _Δσ ) ;
		_cosΔσ = Cos ( _Δσ ) ;

		_α21 = Atan ( _mm / ( _nn * _cosΔσ - _sinθ1 * _sinΔσ ) ) ;
		_α21 =
			If ( _mm ≠ 0 ;
				Mod ( _α21 ; Pi ) + Pi ;	// in [Pi,2*Pi)
				/* Else */ 0
			) ;

		_tanϕ2 =
			If ( _mm ≠ 0 ;
				-1
				* ( _sinθ1 * _cosΔσ + _nn * _sinΔσ )
				* Sin ( _α21 )
				/ ( _oneMinusFlattening * _mm ) ;
			/* Else */
				Tan ( Pi / 2 + _σ1 - _Δσ ) / _oneMinusFlattening
			) ;
		_ϕ2 = Atan ( _tanϕ2 ) ;

		_hh =
			_c1 * ( 1 - _c2 ) * _Δσ
			- _c1 * _c2 * _sinΔσ * Cos ( 2 * _σ1 - _Δσ ) ;
		_tanΔη =
			_sinΔσ * _sinAzimuth
			/ ( _cosθ1 * _cosΔσ - _sinθ1 * _sinΔσ * _cosAzimuth ) ;
		_v = Atan ( Abs ( _tanΔη ) ) ;
		_Δη = If ( _tanΔη ≤ 0 or _v < _hh ; Pi - _v ; /* Else */ _v ) ;
		_Δλ = _Δη - _hh ;
		_λ2 = Radians ( startLongitude ) + _Δλ ;
		_λ2 = If ( _λ2 > Pi ; _λ2 - 2 * Pi ; /* Else */ _λ2 )
	] ;
		List (
			Degrees ( _ϕ2 ) ;
			Degrees ( _λ2 ) ;
			Degrees ( _α21 )
		)
	)
)