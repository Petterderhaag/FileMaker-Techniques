/*******************************************************************************
 * LocationBoxBounds ( latitude ; longitude ; radiusInMeters )
 * Calculates the approximate coordinate bounds for an approximately square
 * region around a point on the surface of the Earth. This can be useful for
 * finding data within a certain distance of a reference point.
 *
 * Use FileMaker's GetValue function to retrieve each value from the result.
 *
 * When the geobox includes a pole, the function will return the appropriate
 * values to perform a find for coordinates enclosed by the lower latitude. For
 * example: [90, 88, -180, 180] for a region around the north pole.
 *
 * When the geobox crosses the antimeridian (180ยบ/-180ยบ longitude), the function
 * will return a west boundary coordinate greater than the east boundary
 * coordinate. In this situation, a coordinate search within the geobox should
 * be broken into separate searches: one search from the west bound to 180ยบ, and
 * another from -180ยบ to the east bound.
 *
 * The bounding region's approximation to a square shape is less accurate as
 * radiusInMeters grows large and as the region approaches either pole. However,
 * the region will always contain the circular region of the same radius.
 *
 * Square bounding regions are more computationally convenient for finding data.
 * Developers needing an exact circular region can use a square region to
 * constrain the available data to a smaller found set, then use the GeoDistance
 * function to omit points between the circular and square neighborhoods of the
 * reference point.
 *
 * @parameter latitude: Degrees between -90 and 90 for center of geobox
 * @parameter longitude: Degrees between -180 and 180 for center of geobox
 * @parameter radiusInMeters: The distance in meters from the center of the
 * region to the closest points on the edges of the square bounding region.
 *
 * @return A return-delimited list of 4 numbers:
 *		1. The south latitude boundary for the calculated region
 *		2. The north latitude boundary for the calculated region
 *		3. The west longitude boundary for the calculated region
 *		4. The east longitude boundary for the calculated region
 *
 * @history 2012-09-26 - Jeremy Bante <http://scr.im/jbante> - Created
 * @history 2012-09-27 - Jeremy Bante <http://scr.im/jbante> - accounting for
 * geoboxes that may span a pole or meridian.
 ******************************************************************************/

Let ( [
	_earthRadius = 6374447 ;	// average, in meters

	// calculate latitude bounds
	_latitudeOffset = Degrees ( radiusInMeters / _earthRadius ) ;
	_north = latitude + _latitudeOffset ;
	_south = latitude - _latitudeOffset ;
	_wrapNorth = _north > 90 ;
	_wrapSouth = _south < -90 ;
	_northBound =
		Case (
			_wrapNorth ; 90 ;
			_wrapSouth ; Max ( _north ; -180 - _south ) ;
			_north
		) ;
	_southBound =
		Case (
			_wrapSouth ; -90 ;
			_wrapNorth ; Min ( _south ; 180 - _north ) ;
			_south
		) ;

	// calculate longitude bounds
	_longitudeOffset = _latitudeOffset * Cos ( Radians ( latitude ) ) ;
	_eastBound =
		If ( _wrapNorth or _wrapSouth ;
			180 ;
			/* Else */ longitude + _longitudeOffset
		) ;
	_eastBound =
		If ( _eastBound > 180 ; _eastBound - 360 ; /* Else */ _eastBound ) ;
	_westBound =
		If ( _wrapNorth or _wrapSouth ;
			-180 ;
			/* Else */ longitude - _longitudeOffset
		) ;
	_westBound =
		If ( _westBound < -180 ;
			_westBound + 360 ;
			/* Else */ _westBound
		)
] ;
	List (
		_southBound ;
		_northBound ;
		_westBound ;
		_eastBound
	)
)