/**
 *******************************************************************************
 * LocationDistanceValues ( startLatitude ; startLongitude ; endLatitude ; endLongitude )
 *
 * RETURNS:
 *		A return-delimited list of data about the path between two points on the
 *		surface of the Earth:
 *		- distance in meters between the two points
 *		- initial bearing starting from the start point towards the end point
 *		- final forward bearing at the end point
 *
 * PARAMETERS:
 *		startLatitude: Latitude of the first point, in degrees
 *		startLongitude: Longitude of the first point, in degrees
 *		endLatitude: Latitude of the second point, in degrees
 *		endLongitude: Longitude of the first point, in degrees
 *
 * DEPENDENCIES: none
 *
 * NOTES:
 *		This function calculates based on a spherical approximation of the
 *		surface of the Earth.
 *
 * HISTORY:
 *		CREATED on 2013-09-02 by Jeremy Bante <http://scr.im/jbante>.
 *
 * REFERENCES:
 *		Haversine formula:	http://en.wikipedia.org/wiki/Haversine_formula
 *******************************************************************************
 */

Let ( [
	// precompute values used in formulas more than once
	~longitudeDifference = Radians ( endLongitude - startLongitude ) ;
	~cosLatitudeDifference = Cos ( Radians ( endLatitude - startLatitude ) ) ;
	~cosLongitudeDifference = Cos ( ~longitudeDifference ) ;
	~startLatitude = Radians ( startLatitude ) ;
	~startLongitude = Radians ( startLongitude ) ;
	~endLatitude = Radians ( endLatitude ) ;
	~endLongitude = Radians ( endLongitude ) ;
	~cosStartLatitude = Cos ( ~startLatitude ) ;
	~cosEndLatitude = Cos ( ~endLatitude ) ;
	~sinStartLatitude = Sin ( ~startLatitude ) ;
	~sinEndLatitude = Sin ( ~endLatitude ) ;

	~distance =
		6378137	// equatorial radius of Earth (WGS 84)
		* Acos (
			~cosLatitudeDifference
			- ~cosStartLatitude
			* ~cosEndLatitude
			* ( 1 - ~cosLongitudeDifference )
		) ;

	// calculate forward bearing of path at start point
	~bearingY = Sin ( ~longitudeDifference ) * ~cosLatitudeDifference ;
	~bearingX =
		~cosStartLatitude * ~sinEndLatitude
		- ~sinStartLatitude * ~cosEndLatitude * ~cosLongitudeDifference ;
	~startBearing =	// Atan2 ( ~bearingY ; ~bearingX ) in range [0,2*Pi)
		Case (
			~bearingX < 0 ;
				Atan ( ~bearingY / ~bearingX ) + Pi ;

			~bearingX > 0 and ~bearingY < 0 ;
				Atan ( ~bearingY / ~bearingX ) + 2 * Pi ;

			~bearingX ≠ 0 ;
				Atan ( ~bearingY / ~bearingX ) ;

			~bearingY > 0 ;
				Pi / 2 ;

			~bearingY < 0 ;
				3 / 2 * Pi ;

			/* Else, ~bearingX = ~bearingY = 0 */
				0
		) ;

	// calculate forward bearing of path at end point
	// evaluate as bearing from end point to start point, then reverse direction
	~longitudeDifference = 0 - ~longitudeDifference ;
	~bearingY =
		Sin ( ~longitudeDifference )
		* Cos ( ~startLatitude - ~endLatitude ) ;
	~bearingX =
		~cosEndLatitude * ~sinStartLatitude
		- ~sinEndLatitude * ~cosStartLatitude * Cos ( ~longitudeDifference ) ;
	~endBearing =	// Atan2 ( ~bearingY ; ~bearingX ) in range [0,2*Pi)
		Case (
			~bearingX < 0 ;
				Atan ( ~bearingY / ~bearingX ) + Pi ;

			~bearingX > 0 and ~bearingY < 0 ;
				Atan ( ~bearingY / ~bearingX ) + 2 * Pi ;

			~bearingX ≠ 0 ;
				Atan ( ~bearingY / ~bearingX ) ;

			~bearingY > 0 ;
				Pi / 2 ;

			~bearingY < 0 ;
				3 / 2 * Pi ;

			/* Else, ~bearingX = ~bearingY = 0 */
				0
		) ;
	~endBearing =	// reverse direction for forward azimuth
		Mod ( Degrees ( ~endBearing ) + 180 ; 360 )
] ;
	~distance
	& ¶
	& Degrees ( ~startBearing )
	& ¶
	& ~endBearing
)