/**
 * =====================================
 * #AssignScriptParameters
 *
 * PURPOSE:
 *		#AssignScriptParameters uses the current script parameter (treated as if
 *		generated by the # function) to declare and populate a series of
 *		locally-scoped script variables. #AssignScriptParameters also uses the
 *		current script name to determine whether or not all required named
 *		parameters are populated (≠ Null). This function is NOT equivalent to
 *		#Assign ( Get ( ScriptParameter ) ).
 *
 * RETURNS:
 *		True (1) when the script parameter is a valid set of name-value pairs
 *		(which includes the empty string) and all parameters defined as required
 *		according to the script name are non-null; False (0) otherwise.
 *
 * PARAMETERS: none
 *
 * DEPENDENCIES: none
 *
 * NOTE:
 *		To be accessible outside this function, variable declarations in the
 *		script parameter must use the $- or $$-prefixed notation for FileMaker
 *		variables. This function does not handle that for you.
 *
 * HISTORY:
 *		MODIFIED on 2010-10-04 by Jeremy Bante to return explicit True or False
 *		values indicating successful evaluation of the script parameter, and to
 *		follow syntax inspired by a comment on standards.filemakermagazine.com
 *		by Richard Dyce.
 *		CREATED on 2010-03-13 by Jeremy Bante <http://scr.im/jbante>.
 *		INSPIRED by an example in the FileMaker help documentation.
 *
 * REFERENCES:
 *		Script Parameter Interface Best Practice: http://filemakerstandards.org/pages/viewpage.action?pageId=557462
 * =====================================
 */

Let ( [
	~evaluateString =
		"Let ( [¶"
		& Get ( ScriptParameter )
		& "$void = $void" // terminating variable to keep parameter syntax consistent
		& "¶];¶"
		& "True¶)"
];
	Case (
		not IsValidExpression ( ~evaluateString );
			False;

		// Else, check that required parameters are populated
		Evaluate ( ~evaluateString )
		and
		Let ( [
			// define delimiters in script name
			~BEGIN = "(";
			//~END = ")";
			~DELIMITER = ";";
			~OPTIONAL = "{";

			// parse required parameters from script name
			~parameters = Substitute ( Get ( ScriptName ) ; ["¶"; ""]; [" "; ""] );
			~beginParameters = Position ( ~parameters ; ~BEGIN ; 1 ; 1 );
			~endParameters = Position ( ~parameters ; ~OPTIONAL ; 1 ; 1 );
			~endParameters =
				Case ( not ~endParameters ; Length ( ~parameters ) ; ~endParameters );
			~parameters =	// isolate required parameter names
				Middle (
					~parameters;
					~beginParameters + 1;
					~endParameters - ~beginParameters - 1
				);
			~parameters =	// remove any trailing delimiter
				Substitute (
					Trim ( ~parameters ) & "☠";
					[ ~DELIMITER & "☠" ; "" ];
					[ "☠" ; "" ];
					[ ~DELIMITER ; "¶" ]
				)
		];
			// check that required parameters are non-null
			Case (
				~beginParameters and Length ( ~parameters );
					Evaluate ( // return True if required parameters are populated
						"Length ( $"
						& Substitute (
							~parameters;
							"¶";
							" ) and Length ( $"
						)
						& " )"
					);

				// Else, no required parameters, return True by default
					True
			)
		)
	)
)