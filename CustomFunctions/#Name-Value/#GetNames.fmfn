/**
 * =====================================
 * #GetNames ( parameters )
 *
 * RETURNS:
 *		A ¶-delimited list of names from the name-value pairs in parameters.
 *
 * PARAMETERS:
 *		parameters: A ¶-delimited list of name-value pairs generated by
 *		the # function.
 *
 * DEPENDENCIES: none
 *
 * HISTORY:
 *		CREATED on 2011-12-22 by Jeremy Bante <http://scr.im/jbante>.
 * =====================================
 */

Case (
	/* Step 0, set up */
	not $#.step;
		Let ( [
			$#.valueCount = ValueCount ( parameters );
			$#.step = 1
		];
			#GetNames ( parameters )
		);

	/* Step 1, get names */
	$#.step = 1;
		Let ( [
			$#.i = $#.i + 1;

			~value = GetValue ( parameters ; $#.i );
			~delimiterPosition = Position ( ~value ; " = " ; 1 ; 1 );
			~name = Middle ( ~value ; 2 ; ~delimiterPosition - 2 );

			$#.nameList = List ( $#.nameList ; ~name );
			$#.step =
				If ( $#.i ≥ $#.valueCount ; $#.step + 1 ; /* Else */ $#.step )
		];
			#GetNames ( parameters )
		);

	/* Step 2, clean up and return result */
	$#.step = 2;
		Let ( [
			~nameList = $#.nameList;

			// Purge variables
			$#.i = "";
			$#.nameList = "";
			$#.step = "";
			$#.valueCount = ""
		];
			~nameList
		)
)