/**
 * =====================================
 * #Evaluate ( parameters )
 *
 * RETURNS:
 *		A ¶-delimited list of name-value pairs where each name is a name from
 *		parameters, and the value is the result of evaluating the value as a
 *		calculation.
 *
 * PARAMETERS:
 *		parameters: A ¶-delimited list of name-value pairs generated by
 *		the # function.
 *
 * DEPENDENCIES: none
 *
 * HISTORY:
 *		CREATED on 2011-12-22 by Jeremy Bante <http://scr.im/jbante>.
 * =====================================
 */

Case (
	/* Step 0, set up */
	not $#.step;
		Let ( [
			$#.valueCount = ValueCount ( parameters );
			$#.step = 1
		];
			#Evaluate ( parameters )
		);

	/* Step 1, evaluate values */
	$#.step = 1;
		Let ( [
			$#.i = $#.i + 1;

			~value = GetValue ( parameters ; $#.i );
			~isValueEmpty = IsEmpty ( ~value );
			~delimiterPosition = Position ( ~value ; " = " ; 1 ; 1 );
			~prefix = Left ( ~value ; ~delimiterPosition + 2 );
			~value =
				Middle (
					~value;
					~delimiterPosition + 3;
					Length ( ~value ) - ~delimiterPosition - 3
				);
			~isValueEmpty = ~isValueEmpty or IsEmpty ( ~value );
			~value = Evaluate ( Evaluate ( ~value ) );

			$#.result =
				$#.result
				& If ( not ~isValueEmpty;
					~prefix & Quote ( ~value ) & ";¶"
				);
			$#.step =
				If ( $#.i ≥ $#.valueCount ; $#.step + 1 ; /* Else */ $#.step )
		];
			#Evaluate ( parameters )
		);

	/* Step 2, clean up and return result */
	$#.step = 2;
		Let ( [
			~result = $#.result;

			// Purge variables
			$#.i = "";
			$#.result = "";
			$#.step = "";
			$#.valueCount = ""
		];
			~result
		)
)