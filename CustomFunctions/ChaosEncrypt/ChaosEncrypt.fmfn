/*******************************************************************************
 * ChaosEncrypt ( text ; key )
 * Uses chaotic permutations of key to create an encrypted version of text that
 * is extremely difficult to retrieve without the original key. This function
 * uses a pseudo-chaotic stream cipher algorithm adapted to the constraints of
 * FileMaker custom functions.
 *
 * WARNING:
 * Different versions of the ChaosEncrypt and ChaosDecrypt functions are
 * unlikely to be compatible.
 *
 * This function has not been subjected to rigorous cryptanalysis, and the
 * author does not warranty the security of encrypted text.
 *
 * This is a recursive custom function, and hence is limited in the maximum
 * combined length of text and key that it can decrypt.
 *
 * @parameter text: The text string to encrypt
 * @parameter key: The key to use to encrypt text
 *
 * @return An encrypted version of text
 *
 * @history 2011-01-04 - Jeremy Bante <http://scr.im/fugue> - Created
 * @history 2011-01-05 - Jeremy Bante <http://scr.im/fugue> - use a different
 * chaotic map when transforming the key.
 * @history 2011-01-09 - Jeremy Bante <http://scr.im/fugue> - use a different
 * chaotic map that results in greater diffusion and faster calculation.
 * @history 2011-01-14 - Jeremy Bante <http://scr.im/fugue> -  use a different
 * map and systematically perturbed orbits.
 * @history 2011-01-23 - Jeremy Bante <http://scr.im/fugue> - accounting for
 * composite characters.
 ******************************************************************************/

Case (
	/* First call to function; initialize variables */
	not $~chaos.step ;
	Let ( [
		$~chaos.keyLength = Length ( key ) ;
		$~chaos.priorByte = 32749 ;	// greatest prime < 2^15
		$~chaos.step = 1
	] ;
		ChaosEncrypt ( text ; key )
	) ;

	/* Step 1, convert key to numbers and scramble first round */
	$~chaos.step = 1 ;
	Let ( [
		// extract next byte from key, accounting for composite characters
		_keyByte = Code ( Left ( key ; 1 ) ) ;
		_extraByte = Left ( _keyByte ; Length ( _keyByte ) - 5 ) ;
		_keyByte = Mod ( Right ( _keyByte ; 5 ) + $~chaos.priorByte ; 65535 ) ;

		// iterate _keyByte through the map 8x, perturb 4th orbits
		_keyByte = Mod ( 4099 * ( 65535 - _keyByte ) ; 65535 ) ;
		_keyByte = Mod ( 4099 * ( 65535 - _keyByte ) ; 65535 ) ;
		_keyByte = Mod ( 4099 * ( 65535 - _keyByte ) ; 65535 ) ;
		_keyByte = Mod ( 4099 * ( 65535 - _keyByte ) + 1; 65535 ) ;

		_keyByte = Mod ( 4099 * ( 65535 - _keyByte ) ; 65535 ) ;
		_keyByte = Mod ( 4099 * ( 65535 - _keyByte ) ; 65535 ) ;
		_keyByte = Mod ( 4099 * ( 65535 - _keyByte ) ; 65535 ) ;
		_keyByte = Mod ( 4099 * ( 65535 - _keyByte ) + 1 ; 65535 ) + 1 ;

		// add new value to list
		$~chaos.key = List ( _keyByte ; $~chaos.key ) ;
		$~chaos.priorByte = _keyByte ;

		// continue until whole key is processed
		_keyLength = Length ( key ) ;
		$~chaos.step =
			If ( _keyLength > 1 ; $~chaos.step ; /* Else */ $~chaos.step + 1 )
	] ;
		ChaosEncrypt (
			text ;
			Char ( _extraByte ) & Right ( key ; _keyLength - 1 )
		)
	) ;

	/* Step 2, apply key to text */
	$~chaos.step = 2 ;
	Let ( [
		_keyByte =
			Mod ( GetValue ( $~chaos.key ; 1 ) + $~chaos.priorByte ; 65535 ) ;

		// iterate _keyByte through the map 8x, perturb 4th orbits
		_keyByte = Mod ( 4099 * ( 65535 - _keyByte ) ; 65535 ) ;
		_keyByte = Mod ( 4099 * ( 65535 - _keyByte ) ; 65535 ) ;
		_keyByte = Mod ( 4099 * ( 65535 - _keyByte ) ; 65535 ) ;
		_keyByte = Mod ( 4099 * ( 65535 - _keyByte ) + 1; 65535 ) ;

		_keyByte = Mod ( 4099 * ( 65535 - _keyByte ) ; 65535 ) ;
		_keyByte = Mod ( 4099 * ( 65535 - _keyByte ) ; 65535 ) ;
		_keyByte = Mod ( 4099 * ( 65535 - _keyByte ) ; 65535 ) ;
		_keyByte = Mod ( 4099 * ( 65535 - _keyByte ) + 1 ; 65535 ) + 1 ;

		// extract next byte from text, accounting for composite characters
		_textByte = Code ( Left ( text ; 1 ) ) ;
		_extraByte = Left ( _textByte ; Length ( _textByte ) - 5 ) ;
		_textByte = Right ( _textByte ; 5 ) ;

		// apply key to text
		// additive complement under 2^16 - 1 is analogous to
		// XOR in binary encryption
		_textByte = 65535 - Mod ( _textByte + _keyByte ; 65535 ) ;
		$~chaos.cipherText = $~chaos.cipherText & Char ( _textByte ) ;

		// rotate the key
		$~chaos.priorByte = _textByte ;
		$~chaos.key =
			Substitute (
				List (
					RightValues ( $~chaos.key ; $~chaos.keyLength - 1 ) ;
					_keyByte
				) ;
				"¶¶" ;
				"¶"
			) ;

		// continue until whole text is encrypted
		_textLength = Length ( text ) ;
		$~chaos.step =
			If ( _textLength > 1 ; $~chaos.step ; /* Else */ $~chaos.step + 1 )
	] ;
		ChaosEncrypt (
			Char ( _extraByte ) & Right ( text ; _textLength - 1 ) ;
			""
		)
	) ;

	/* Step 3, clean-up and return result */
	$~chaos.step = 3 ;
	Let ( [
		_cipherText = $~chaos.cipherText ;

		// purge variables
		$~chaos.cipherText = "" ;
		$~chaos.key = "" ;
		$~chaos.keyLength = "" ;
		$~chaos.priorByte = "" ;
		$~chaos.step = ""
	] ;
		_cipherText
	)
)